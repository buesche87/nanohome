#!/bin/bash
#/////////////////////////////////////////////////////////////////////////////////////
# Nanohome Shelly Plus device watcher
#
# - loop forever, iterate every n seconds defined in $devwatcher_interval from config
# - subscribe to $topic_online to get all available shellies and their
#   - online status
#   - COMPONENT configuration
# - for every COMPONENT not filtered through $not_monitored_COMPONENTs get
#   - connected state
#   - COMPONENT description
#   - output and/or position and publish this VALUE retained for dashboard elements
#   - publish connected=false if the device is not known
#   - write VALUEs into influxdb
#/////////////////////////////////////////////////////////////////////////////////////


# Convert string-boolean to 1 or 0
convert_value() {
	[[ "$1" == "true" ]] || [[ "$1" == "on" ]] && echo 1 || echo 0
}

# Main Service
while /bin/true; do

	# Subscribe to online topics for 2 seconds
	AVAILABLEDEVICES=($(mosquitto_sub -h "${MQTT_SERVICE}" -u "${MQTT_USER}" -P "${MQTT_PASSWORD}" -t "${TOPIC_ONLINE}" -W 2 --retained-only --nodelay --quiet -F "%t,%p"))

	# Process every device available
	for AVAILABLEDEVICE in "${AVAILABLEDEVICES[@]}"; do

		# Create temp file to write device status into
		TEMPOUT=$(mktemp)

		# Extract message from online topic
		ONLINETOPIC=$(echo "${AVAILABLEDEVICE}" | cut -d ',' -f 1)
		ONLINEMESSAGE=$(echo "${AVAILABLEDEVICE}" | cut -d ',' -f 2-)
		ONLINEVALUE=$(convert_value "${ONLINEMESSAGE}")
		DEVICEID=$(echo "${ONLINETOPIC}" | cut -d '/' -f 1)

		# Subscribe to status topic for 2 seconds, do this in background and write output to the temp file
		STATUSTOPIC="${DEVICEID}/status"
		mosquitto_sub -h "${MQTT_SERVICE}" -u "${MQTT_USER}" -P "${MQTT_PASSWORD}" -t "${STATUSTOPIC}" -C 1 -W 2 --nodelay --quiet > "${TEMPOUT}" &

		# Publish status_update to device, the output will be catched by the previous subscribtion
		COMMANDTOPIC="${DEVICEID}/command"
		mosquitto_pub -h "${MQTT_SERVICE}" -u "${MQTT_USER}" -P "${MQTT_PASSWORD}" -t "${COMMANDTOPIC}" -m "status_update"

		sleep 2

		# Validate file content and fill it to a variable, goto next iteration if validation fails
		JSONOUTPUT=$(jq -e . "$TEMPOUT" 2>/dev/null) || continue
		rm "${TEMPOUT}"

		# Loop through all COMPONENTs found in the temp file
		echo "${JSONOUTPUT}" | jq -r 'to_entries[] | "\(.key), \(.value)"' |
		while IFS=, read -r COMPONENT VALUE; do
					
			# Do not monitor components excluded in config
			IFS=',' read -r -a COMPONENTSARRAY <<< "${NOT_MONITORED_COMPONENTS}"
			match=false
			for item in "${COMPONENTSARRAY[@]}"; do
				[[ "${COMPONENT}" == "$item" ]] && match=true && break
			done

			if ! $match; then

				# Get connected status, publish connected=false for new devices 
				CONNECTEDTOPIC="${DEVICEID}/status/$COMPONENT}/connected"
				CONNECTEDMESSAGE=$(mosquitto_sub -h "${MQTT_SERVICE}" -u "${MQTT_USER}" -P "${MQTT_PASSWORD}" -t "${CONNECTEDTOPIC}" -C 1 -W 1 --retained-only --nodelay --quiet)
				CONNECTEDVALUE=$(convert_value "${CONNECTEDMESSAGE}")
				[[ $CONNECTEDVALUE -eq 0 ]] && mosquitto_pub -r -h "${MQTT_SERVICE}" -u "${MQTT_USER}" -P "${MQTT_PASSWORD}" -t "${CONNECTEDTOPIC}" -m "false"

				# Get description
				DESCRIPTIONTOPIC="${DEVICEID}/status/${COMPONENT}/description"
				DESCRIPTIONMESSAGE=$(mosquitto_sub -h "${MQTT_SERVICE}" -u "${MQTT_USER}" -P "${MQTT_PASSWORD}" -t "${DESCRIPTIONTOPIC}" -C 1 -W 1 --retained-only --nodelay --quiet)
				DESCRIPTION="${DESCRIPTIONMESSAGE// /\\ }"
			
				# Get output or position and publish value
				OUTPUTTOPIC="${DEVICEID}/status/${COMPONENT}/output"
				SWITCHPOWER=$(echo "${VALUE}" | jq -r .apower )
				CURRENTPOSITION=$(echo "${VALUE}" | jq -r .current_pos )
				[[ "${SWITCHPOWER}" != "null" ]] && OUTPUTVALUE="${SWITCHPOWER}"
				[[ "${CURRENTPOSITION}" != "null" ]] && OUTPUTVALUE="${CURRENTPOSITION}"
				mosquitto_pub -r -h "${MQTT_SERVICE}" -u "${MQTT_USER}" -P "${MQTT_PASSWORD}" -t "${OUTPUTTOPIC}" -m "${OUTPUTVALUE}"

				# Write device into influxdb devices bucket
				[ -z $DESCRIPTION ] && PAYLOAD="${DEVICEID},Component=${COMPONENT} Online=${ONLINEVALUE},Connected=${CONNECTEDVALUE},Output=${OUTPUTVALUE}"
				[ -n $DESCRIPTION ] && PAYLOAD="${DEVICEID},Component=${COMPONENT},Description=${DESCRIPTION} Online=${ONLINEVALUE},Connected=${CONNECTEDVALUE},Output=${OUTPUTVALUE}"
				influx write -b "${INFLUXDB_BUCKET_DEVICES}" -p s "${PAYLOAD}"
			fi
		done
	done

	sleep $DEVWATCHER_INTERVAL

done
