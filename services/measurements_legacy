#!/bin/bash
#/////////////////////////////////////////////////////////////////////////////////////
# nanohome - measurements service legacy
#
# Get measurements from shelly gen1 pm devices
# - Subscribe to the "connected" topic of all devices components
# - Filter messages from not connected or not monitored components
# - For each monitored component start a background process that:
#   - Subscribes to the relevant topics
#   - And writes the values into influx bucket "Measurements"
#
# TODO:
# - stop / kill services for removed components
#/////////////////////////////////////////////////////////////////////////////////////

# MQTT connection string with credentials
MQTT_CONNECTION_STRING=(
	-h "${MQTT_SERVER}"
	-u "${MQTT_USER}"
	-P "${MQTT_PASSWORD}"
)

# MQTT retained message subscription options
MQTT_RETAINED_OPTIONS=(
	--retained-only
	--nodelay
	--quiet
	-C 1
	-W 1
)

# Start component monitoring in background
start_measurement() {
	local measurement=$1
	local description=$2
	local topic=$3

	mosquitto_sub "${MQTT_CONNECTION_STRING[@]}" -t "${topic}" -q 2 | \
		while read -r value; do
			influx write -b "${INFLUX_BUCKET_MEASUREMENTS}" -p s "${description} ${measurement}=$value"
		done &

	[[ $LOG_SERVICES ]] && echo -e "${LOG_SUCC} Devwatcher Legacy: Measurement started - [${topic}]" >> /proc/1/fd/1
}

# Convert string-boolean to 1 or 0
convert_value() {
	[[ "$1" == "true" ]] || [[ "$1" == "on" ]] && echo 1 || echo 0
}

#===============================================================
# Execute every NANOHOME_MEASUREMENTS_LEGACY_INTERVAL seconds
#===============================================================

while /bin/true; do

	# Subscribe to "shellies/+/+/+/connected"
	CONNECTED_COMPONENTS=$(
		mosquitto_sub "${MQTT_CONNECTION_STRING[@]}" \
		--retained-only --nodelay --quiet -F "%j" -W 2 \
		-t "${MQTT_TOPIC_CONNECTED_LEGACY}"
	)

	CONNECTED_COMPONENTS_ARRAY=$(
		jq -s '.' <<< "${CONNECTED_COMPONENTS}"
	)

	#===============================================================
	# For each connected component get device status
	#===============================================================

	jq -c '.[]' <<< "${CONNECTED_COMPONENTS_ARRAY}" |
	while read -r CONNECTED_DEVICE; do

		# Extract topic from json formatted message
		CONNECTEDTOPIC=$( jq -r '.topic' <<< "${CONNECTED_DEVICE}" )
		DEVICEID=$( cut -d '/' -f 2 <<< "${CONNECTEDTOPIC}" )
		COMPONENT=$( cut -d '/' -f 3 <<< "${CONNECTEDTOPIC}")
		COMPONENTINDEX=$( cut -d '/' -f 4 <<< "${CONNECTEDTOPIC}" )	

		#===============================================================
		# Filter components not monitored
		#===============================================================

		[[ " ${NANOHOME_NOT_MONITORED_COMPONENTS_LEGACY//,/ } " == *" ${COMPONENT} "* ]] && continue

		#===============================================================
		# Filter components not connected
		#===============================================================

		CONNECTEDTOPIC="shellies/${DEVICEID}/${COMPONENT}/${COMPONENTINDEX}/connected"

		CONNECTED=$(
			mosquitto_sub "${MQTT_CONNECTION_STRING[@]}" \
			"${MQTT_RETAINED_OPTIONS[@]}" \
			-t "${CONNECTEDTOPIC}"
		)

		CONNECTEDVALUE=$( convert_value "${CONNECTED}" )

		[[ $CONNECTEDVALUE -eq 0 ]] && continue

		#===============================================================
		# Filter components without description
		#===============================================================

		DESCRIPTIONTOPIC="shellies/${DEVICEID}/${COMPONENT}/${COMPONENTINDEX}/description"

		DESCRIPTION=$(
			mosquitto_sub "${MQTT_CONNECTION_STRING[@]}" \
			"${MQTT_RETAINED_OPTIONS[@]}" \
			-t "${DESCRIPTIONTOPIC}"
		)

		[[ -z "${DESCRIPTION}" ]] && continue

		DESCRIPTION_ESCAPED="${DESCRIPTION// /\\ }"

		#===============================================================
		# Start measurements
		#===============================================================

		# Measurement topics to subscribe to
		ENERGYTOPIC="shellies/${DEVICEID}/${COMPONENT}/${COMPONENTINDEX}/energy"
		POWERTOPIC="shellies/${DEVICEID}/${COMPONENT}/${COMPONENTINDEX}/power"
		DEVICETEMPTOPIC="shellies/${DEVICEID}/${COMPONENT}/${COMPONENTINDEX}/temperature"

		# Check if component is monitored already
		MONITORED_ENERGY=$(	ps | grep "${ENERGYTOPIC}" | grep -v "grep"	)
		MONITORED_POWER=$(	ps | grep "${POWERTOPIC}" | grep -v "grep"	)
		MONITORED_DEVICETEMP=$(	ps | grep "${DEVICETEMPTOPIC}" | grep -v "grep"	)

		# Monitor component and write measurements into "Measurements" bucket
		[[ -z "${MONITORED_ENERGY}" ]] && start_measurement "Energy" "${DESCRIPTION_ESCAPED}" "${ENERGYTOPIC}"
		[[ -z "${MONITORED_POWER}" ]] && start_measurement "Power" "${DESCRIPTION_ESCAPED}" "${POWERTOPIC}"
		[[ -z "${MONITORED_DEVICETEMP}" ]] && start_measurement "Devicetemp" "${DESCRIPTION_ESCAPED}" "${DEVICETEMPTOPIC}"
	done

	sleep $NANOHOME_MEASUREMENTS_LEGACY_INTERVAL

done
