#!/bin/bash
#/////////////////////////////////////////////////////////////////////////////////////
# nanohome Shelly legacy device watcher service
#
# - MQTT Subscribe to devices online topic
# - Get all available devices, their online status and component configuration
# - Filter components not monitored
# - Write component infos into influxdb bucket "devices"
#/////////////////////////////////////////////////////////////////////////////////////



#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#  -T,
# --filter-out
# Suppress printing of topics that match the filter. This allows subscribing to a wildcard topic and only printing a partial set of the wildcard hierarchy.
# 
# For example, subscribe to the BBC tree, but suppress output from Radio 3:
# 
# mosquitto_sub -t bbc/# -T bbc/radio3
# This option may be repeated to filter out multiple topics or topic trees.

# Convert string-boolean to 1 or 0
convert_value() {
	[[ "$1" == "true" ]] || [[ "$1" == "on" ]] && echo 1 || echo 0
}

MQTT_CONNECTION_STRING=(
	-h "${MQTT_SERVER}"
	-u "${MQTT_USER}"
	-P "${MQTT_PASSWORD}"
)

MQTT_SUBSCRIBE_RETAINED=(
	--retained-only
	--nodelay
	--quiet
	-F "%j"
	-W 1
)

MQTT_SUBSCRIBE_JSON=(
	--nodelay
	--quiet
	-F "%j"
)

# Main Service
mosquitto_sub \
	"${MQTT_CONNECTION_STRING[@]}" \
	"${MQTT_SUBSCRIBE_JSON[@]}" \
	-t "${MQTT_TOPIC_ONLINE_LEGACY}" | \
	while read -r DEVICESTATUS; do

	# Extract information from mosquitto subscription
	STATUSTOPIC=$( jq -r '.topic' <<< "${DEVICESTATUS}" )
	STATUSMESSAGE=$( jq -r '.payload' <<< "${DEVICESTATUS}" )
	DEVICEID=$( echo "${STATUSTOPIC}" | cut -d '/' -f 2 )
	COMPONENT=$( echo "${STATUSTOPIC}" | cut -d '/' -f 3 )
	COMPONENTINDEX=$( echo "${STATUSTOPIC}" | cut -d '/' -f 4 )
	COMPONENTMERGED="${COMPONENT}:${COMPONENTINDEX}"
	ONLINEVALUE=1 # Assume getting a message equals device is online

	# Filter not monitored components
	if [[ " ${NOT_MONITORED_COMPONENTS_LEGACY//,/ } " == *" $COMPONENT "* ]]; then
		continue
	fi

	MESSAGE_CONNECTED=$(
		mosquitto_sub \
		"${MQTT_CONNECTION_STRING[@]}" \
		"${MQTT_SUBSCRIBE_RETAINED[@]}" \
		-t "shellies/${DEVICEID}/${COMPONENT}/${COMPONENTINDEX}/connected"
	)

	CONNECTEDVALUE=$(convert_value "${CONNECTEDMESSAGE}")

	if [ $CONNECTEDVALUE -eq 0 ]; then
		mosquitto_pub -r \
		"${MQTT_CONNECTION_STRING[@]}" \
		-t "shellies/${DEVICEID}/${COMPONENT}/${COMPONENTINDEX}/connected" \
		-m "false"
	fi


	# Get description, connected status and current output
	MESSAGE_DESCRIPTION=$(
		mosquitto_sub \
		"${MQTT_CONNECTION_STRING[@]}" \
		"${MQTT_SUBSCRIBE_RETAINED[@]}" \
		-t "shellies/${DEVICEID}/${COMPONENT}/${COMPONENTINDEX}/description"
	)
	
	DESCRIPTION="${MESSAGE_DESCRIPTION// /\\ }"

	# Write payload into influxdb
	PAYLOAD='{
		"measurement": "'"${DEVICEID}"'",
		"tags": {
			"Component": "'"${COMPONENTMERGED}"'",
			"Description": "'"${DESCRIPTION}"'",
		},
		"fields": {
			"online": "'"${ONLINEVALUE}"'",
			"connected": "'"${CONNECTEDVALUE}"'"
		},
	}'

	influx write -b "${INFLUXDB_BUCKET_DEVICES}" -f - <<< "${PAYLOAD}"

done
