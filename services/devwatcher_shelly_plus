#!/bin/bash
#/////////////////////////////////////////////////////////////////////////////////////
# Nanohome Shelly Plus device watcher
#
# - loop forever, iterate every n seconds defined in $devwatcher_interval from config
# - subscribe to $MQTT_TOPIC_ONLINE to get all available shellies and their
#   - online status
#   - COMPONENT configuration
# - for every COMPONENT not filtered through $not_monitored_COMPONENTs get
#   - connected state
#   - COMPONENT description
#   - output and/or position and publish this VALUE retained for dashboard elements
#   - publish connected=false if the device is not known
#   - write VALUEs into influxdb
#/////////////////////////////////////////////////////////////////////////////////////


# TODO: Test
# MQTT_SERVER="nanohome.buesche.one"

# Convert string-boolean to 1 or 0
convert_value() {
	[[ "$1" == "true" ]] || [[ "$1" == "on" ]] && echo 1 || echo 0
}

# Main Service
while /bin/true; do

	# Subscribe to "+/online"
	AVAILABLE_DEVICES=$(
		mosquitto_sub \
		"${MQTT_CONNECTION_STRING[@]}" \
		"${MQTT_SUBSCRIBE_RETAINED[@]}" \
		-t "${MQTT_TOPIC_ONLINE}"
	)
	
	AVAILABLE_DEVICES_ARRAY=$(
		jq -s '.' <<< "${AVAILABLE_DEVICES}"
	)

	# Foreach device found subscribe to "shelly-device/status"
	# publish "status_update" to "shelly-device/command"
	jq -c '.[]' <<< "${AVAILABLE_DEVICES_ARRAY}" | while read -r AVAILABLE_DEVICE; do

		ONLINETOPIC=$( jq -r '.topic' <<< "${AVAILABLE_DEVICE}" )
		ONLINEMESSAGE=$( jq -r '.payload' <<< "${AVAILABLE_DEVICE}" )
		ONLINEVALUE=$( convert_value "${ONLINEMESSAGE}" )
		DEVICEID=${ ONLINETOPIC%%/* }

		# DEVICEID=$( cut -d '/' -f 1 <<< "${STATUSTOPIC}" )
		
		# Subscribe to status topic then publish "status_update"
		# Wait for message or goto next iteration after 2 seconds
		MESSAGE_TEMPFILE=$(mktemp)

		mosquitto_sub \
		"${MQTT_CONNECTION_STRING[@]}" \
		"${MQTT_SUBSCRIBE_WAIT[@]}" \
		-t "${DEVICEID}/status" \
		> "${MESSAGE_TEMPFILE}" &

		SUBSCRIBE_PID=$!
		
		mosquitto_pub \
		"${MQTT_CONNECTION_STRING[@]}" \
		-t "${DEVICEID}/command" \
		-m "status_update"

		wait "$SUBSCRIBE_PID"

		MESSAGE_STATUS=$(
			jq -e . "${MESSAGE_TEMPFILE}" 2>/dev/null
		)

		rm "${MESSAGE_TEMPFILE}"
		[ -z "${MESSAGE_STATUS}" ] && continue

		# Loop through every component not filtered in NOT_MONITORED_COMPONENTS
		jq -r 'to_entries[] | "\(.key), \(.value)"' <<< "${MESSAGE_STATUS}" | \
		while IFS=, read -r COMPONENT VALUE; do

			if [[ " ${NOT_MONITORED_COMPONENTS//,/ } " == *" ${COMPONENT} "* ]]; then
				continue
			fi

			# Debug
			echo "Devwatcher - Monitored: ${DEVICEID}/${COMPONENT}"
			jq <<< ${MESSAGE_STATUS}

			# Get connected status of component, publish connected=false for new components
			MESSAGE_CONNECTED=$(
				mosquitto_sub \
				"${MQTT_CONNECTION_STRING[@]}" \
				"${MQTT_SUBSCRIBE_RETAINED[@]}" \
				-t "${DEVICEID}/status/${COMPONENT}/connected"
			)
			
			CONNECTEDVALUE=$(
				convert_value "${MESSAGE_CONNECTED}"
			)

			if [[ $CONNECTEDVALUE -eq 0 ]]; then
				mosquitto_pub -r \
				"${MQTT_CONNECTION_STRING[@]}" \
				-t "${DEVICEID}/status/${COMPONENT}/connected" \
				-m "false"
			fi

			# Get description, connected status and current output
			MESSAGE_DESCRIPTION=$(
				mosquitto_sub \
				"${MQTT_CONNECTION_STRING[@]}" \
				"${MQTT_SUBSCRIBE_RETAINED[@]}" \
				-t "${DEVICEID}/status/${COMPONENT}/description"
			)
			
			DESCRIPTION="${MESSAGE_DESCRIPTION// /\\ }"

			# TODO: Braucht es den Output fürs Dashbaord? > 
			# Falls ja, kann das der measurement-teil übernehmen?
			SWITCHPOWER=$(
				jq -r '.apower' <<< "${VALUE}"
			)

			CURRENTPOSITION=$(
				jq -r '.current_pos' <<< "${VALUE}"
			)

			[ "${SWITCHPOWER}" != "null" ] && OUTPUTVALUE="${SWITCHPOWER}"
			[ "${CURRENTPOSITION}" != "null" ] && OUTPUTVALUE="${CURRENTPOSITION}"

			mosquitto_pub -r \
			"${MQTT_CONNECTION_STRING[@]}" \
			-t "${DEVICEID}/status/${COMPONENT}/output" \
			-m "${OUTPUTVALUE}"

			# Write payload into influxdb
			# TODO: Test "" or null as value?
			PAYLOAD='{
				"measurement": "'"${DEVICEID}"'",
				"tags": {
					"Component": "'"${COMPONENT}"'",
					"Description": "'"${DESCRIPTION}"'",
				},
				"fields": {
					"online": "'"${ONLINEVALUE}"'",
					"connected": "'"${CONNECTEDVALUE}"'",
					"output": "'"${OUTPUTVALUE}"'"
				}
			}'

			# Debug
			echo "Devwatcher - Payload: ${DEVICEID}/${COMPONENT}"
			jq <<< "${PAYLOAD}"

			influx write -b "${INFLUXDB_BUCKET_DEVICES}" -f - <<< "${PAYLOAD}"
		done
	done

	sleep $NANOHOME_DEVWATCHER_INTERVAL

done
