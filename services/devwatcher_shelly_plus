#!/bin/bash
#/////////////////////////////////////////////////////////////////////////////////////
# nanohome - measurements service
#
# Discover and get measurements from Shelly gen3 pm devices
# - Subscribe to the status topic of all devices
# - Filter not monitored components from messages
# - Write device status in Influx "Devices" bucket
# - For connected devices with valid deription
#   parse measurement values and write them into Influx bucket "Measurements"
#/////////////////////////////////////////////////////////////////////////////////////

# Function
convert_value() {
	[[ "$1" == "true" ]] || [[ "$1" == "on" ]] && echo 1 || echo 0
	}


# Configuration
MQTT_CONNECTION_STRING=(
	-h "${MQTT_SERVER}"
	-u "${MQTT_USER}"
	-P "${MQTT_PASSWORD}"
	)

#===============================================================
# Infinitely subscribe to "+/status/+"
#===============================================================

mosquitto_sub "${MQTT_CONNECTION_STRING[@]}" --nodelay --quiet -F "%j" \
	-t "${MQTT_TOPIC_STATUS}" | while read -r COMPONENTSTATUS; do

	# Extract payload and topic
	STATUSMESSAGE=$( jq -r '.payload' <<< "${COMPONENTSTATUS}" )
	STATUSTOPIC=$( jq -r '.topic' <<< "${COMPONENTSTATUS}" )
	DEVICEID=$( cut -d '/' -f 1 <<< "${STATUSTOPIC}" )
	COMPONENT=$( cut -d '/' -f 3 <<< "${STATUSTOPIC}" )
	ONLINEVALUE=1 # Assume getting a message equals device is online

	#===============================================================
	# Filter components not monitored
	#===============================================================

	if [[ " ${NANOHOME_NOT_MONITORED_COMPONENTS//,/ } " =~ " ${COMPONENT} " ]]; then
		continue
	fi

	#===============================================================
	# Filter components not connected
	#===============================================================

	CONNECTED=$(
		mosquitto_sub "${MQTT_CONNECTION_STRING[@]}" \
		--retained-only --nodelay --quiet -C 1 -W 1 \
		-t "${DEVICEID}/status/${COMPONENT}/connected"
		)

	CONNECTEDVALUE=$( convert_value "${CONNECTED}" )

	if [[ $CONNECTEDVALUE -eq 0 ]] ; then
		DEVICE_PAYLOAD="${DEVICEID},Component=${COMPONENT} Online=${ONLINEVALUE},Connected=${CONNECTEDVALUE}"
		influx write -b "${INFLUX_BUCKET_DEVICES}" -p s "${DEVICE_PAYLOAD}"

		[[ $LOG_SERVICES ]] && echo -e "${LOG_INFO} Devwatcher: Message recived from not conected component [${DEVICEID}/${COMPONENT}]" >> /proc/1/fd/1
		[[ $LOG_DEBUG ]] && echo -e "${LOG_INFO} Devwatcher: Line protocol payload [${DEVICE_PAYLOAD}]" >> /proc/1/fd/1
		continue
	fi

	#===============================================================
	# Filter components without description
	#===============================================================

	DESCRIPTION=$(
		mosquitto_sub "${MQTT_CONNECTION_STRING[@]}" \
			--retained-only --nodelay --quiet -C 1 -W 1 \
			-t "${DEVICEID}/status/${COMPONENT}/description"
	)

	DESCRIPTION_ESCAPED="${DESCRIPTION// /\\ }"

	if [[ -z "${DESCRIPTION}" ]]; then

		DEVICE_PAYLOAD="${DEVICEID},Component=${COMPONENT} Online=${ONLINEVALUE},Connected=${CONNECTEDVALUE}"
		influx write -b "${INFLUX_BUCKET_DEVICES}" -p s "${DEVICE_PAYLOAD}"

		[[ $LOG_SERVICES ]] && echo -e "${LOG_INFO} Devwatcher: Message recived from component without description [${DEVICEID}/${COMPONENT}]" >> /proc/1/fd/1
		[[ $LOG_DEBUG ]] && echo -e "${LOG_INFO} Devwatcher: Line protocol payload [${DEVICE_PAYLOAD}]" >> /proc/1/fd/1

		continue
	fi

	#===============================================================
	# Process payload
	#===============================================================

	# Parse message payload
	POWER=$( jq -r '.apower' <<< "${STATUSMESSAGE}" )
	OUTPUT=$( jq -r '.output' <<< "${STATUSMESSAGE}" )
	ENERGY=$(jq -r '.aenergy.total' <<< "${STATUSMESSAGE}" )
	VOLTAGE=$( jq -r '.voltage' <<< "${STATUSMESSAGE}" )
	CURRENT=$( jq -r '.current' <<< "${STATUSMESSAGE}" )
	DEVICETEMP=$( jq -r '.temperature.tC' <<< "${STATUSMESSAGE}" )
	CURRENTPOSITION=$( jq -r '.current_pos' <<< "${STATUSMESSAGE}" )
	ROOM_TEMP=$( jq -r '.tC' <<< "${STATUSMESSAGE}" )
	ROOM_HUM=$( jq -r '.rh' <<< "${STATUSMESSAGE}" )
	BATTERY=$( jq -r '.battery.percent' <<< "${STATUSMESSAGE}" )

	#===============================================================
	# Manage Dashbaord Panels
	#===============================================================

	# Publish current output value (used in home dashboard)
	if [[ "${CURRENTPOSITION}" != "null" ]]; then
		OUTPUTVALUE="${CURRENTPOSITION}"
	else
		OUTPUTVALUE=$( convert_value "${OUTPUT}" )
	fi

	mosquitto_pub -r "${MQTT_CONNECTION_STRING[@]}" \
		-t "${DEVICEID}/status/${COMPONENT}/output" \
		-m "${OUTPUTVALUE}"

	#===============================================================
	# Write measurements into influx buckets
	#===============================================================

	# Write device details into Devices bucket
	DEVICE_PAYLOAD="${DEVICEID},Component=${COMPONENT},Description=${DESCRIPTION_ESCAPED} Online=${ONLINEVALUE},Connected=${CONNECTEDVALUE},Output=${OUTPUTVALUE}"
	influx write -b "${INFLUX_BUCKET_DEVICES}" -p s "${DEVICE_PAYLOAD}"

	[[ $LOG_SERVICES ]] && echo -e "${LOG_INFO} Devwatcher: Message received from [${DEVICEID}/${COMPONENT}]" >> /proc/1/fd/1
	[[ $LOG_DEBUG ]] && echo -e "${LOG_INFO} Devwatcher: Line protocol payload [${DEVICE_PAYLOAD}]" >> /proc/1/fd/1	

	# Prepare measurement string for influx cli (line protocol)
	MEASUREMENT_PAYLOAD="${DESCRIPTION_ESCAPED} "

	[[ "${POWER}" != "null" ]] && MEASUREMENT_PAYLOAD+="Power=${POWER},"
	[[ "${ENERGY}" != "null" ]] && MEASUREMENT_PAYLOAD+="Energy=${ENERGY},"
	[[ "${VOLTAGE}" != "null" ]] && MEASUREMENT_PAYLOAD+="Voltage=${VOLTAGE},"
	[[ "${CURRENT}" != "null" ]] && MEASUREMENT_PAYLOAD+="Current=${CURRENT},"
	[[ "${DEVICETEMP}" != "null" ]] && MEASUREMENT_PAYLOAD+="DeviceTemp=${DEVICETEMP},"
	[[ "${ROOM_TEMP}" != "null" ]] && MEASUREMENT_PAYLOAD+="Temperature=${ROOM_TEMP},"
	[[ "${ROOM_HUM}" != "null" ]] && MEASUREMENT_PAYLOAD+="Humidity=${ROOM_HUM},"
	[[ "${BATTERY}" != "null" ]] && MEASUREMENT_PAYLOAD+="Battery=${BATTERY},"

	# Write measurement into influx bucket "Measurements"
	if [[ "${MEASUREMENT_PAYLOAD}" != "${DESCRIPTION_ESCAPED} " ]]; then

		MEASUREMENT_PAYLOAD="${MEASUREMENT_PAYLOAD%,}"
		influx write -b "${INFLUX_BUCKET_MEASUREMENTS}" -p s "${MEASUREMENT_PAYLOAD}"

		[[ $LOG_SERVICES ]] && echo -e "${LOG_SUCC} Devwatcher: Measurement added for [${DEVICEID}/${COMPONENT}]" >> /proc/1/fd/1
		[[ $LOG_DEBUG ]] && echo -e "${LOG_INFO} Devwatcher: Line protocol payload [${MEASUREMENT_PAYLOAD}]" >> /proc/1/fd/1
	else
		[[ $LOG_SERVICES ]] && echo -e "${LOG_WARN} Devwatcher: No payload for [${DEVICEID}/${COMPONENT}]" >> /proc/1/fd/1
	fi
done
