#!/bin/bash
#/////////////////////////////////////////////////////////////////////////////////////
# Nanohome Shelly Plus device watcher
#
# - loop forever, iterate every n seconds defined in $devwatcher_interval from config
# - subscribe to $MQTT_TOPIC_ONLINE to get all available shellies and their
#   - online status
#   - COMPONENT configuration
# - for every COMPONENT not filtered through $not_monitored_COMPONENTs get
#   - connected state
#   - COMPONENT description
#   - output and/or position and publish this VALUE retained for dashboard elements
#   - publish connected=false if the device is not known
#   - write VALUEs into influxdb
#/////////////////////////////////////////////////////////////////////////////////////

MQTT_CONNECTION_STRING=(
	-h "${MQTT_SERVER}"
	-u "${MQTT_USER}"
	-P "${MQTT_PASSWORD}"
)

# convert string-boolean to 1 or 0
convert_value() {
	[[ "$1" == "true" ]] || [[ "$1" == "on" ]] && echo 1 || echo 0
}

# loop every $NANOHOME_DEVWATCHER_INTERVAL second
while /bin/true; do

	# subscribe to "+/online"
	AVAILABLE_DEVICES=$(
		mosquitto_sub "${MQTT_CONNECTION_STRING[@]}" \
		--retained-only --nodelay --quiet -W 2 -F "%j" \
		-t "${MQTT_TOPIC_ONLINE}"
	)
	
	# create array from retreived messages
	AVAILABLE_DEVICES_ARRAY=$(
		jq -s '.' <<< "${AVAILABLE_DEVICES}"
	)

	# foreach device found subscribe to "shelly-deviceid/status"
	# publish "status_update" to "shelly-deviceid/command"
	# parse message and write into influxsb
	jq -c '.[]' <<< "${AVAILABLE_DEVICES_ARRAY}" | while read -r AVAILABLE_DEVICE; do

		ONLINETOPIC=$( jq -r '.topic' <<< "${AVAILABLE_DEVICE}" )
		ONLINEMESSAGE=$( jq -r '.payload' <<< "${AVAILABLE_DEVICE}" )
		ONLINEVALUE=$( convert_value "${ONLINEMESSAGE}" )
		DEVICEID=$( cut -d '/' -f 1 <<< "${ONLINETOPIC}" )

		# subscribe, wait for answer stored in temporary file
		# or goto next iteration after 2 seconds
		MESSAGE_TEMPFILE=$(mktemp)

		mosquitto_sub "${MQTT_CONNECTION_STRING[@]}" \
		--nodelay --quiet -C 1 -W 2 -F "%j" \
		-t "${DEVICEID}/status" \
		> "${MESSAGE_TEMPFILE}" &

		SUBSCRIBE_PID=$!
		
		mosquitto_pub "${MQTT_CONNECTION_STRING[@]}" \
		-t "${DEVICEID}/command" \
		-m "status_update"

		wait "$SUBSCRIBE_PID"

		MESSAGE_STATUS=$(
			jq -r '.payload' "${MESSAGE_TEMPFILE}" 2>/dev/null
		)

		rm "${MESSAGE_TEMPFILE}"
		[[ -z "${MESSAGE_STATUS}" ]] && continue

		# loop through every component not filtered with $NANOHOME_NOT_MONITORED_COMPONENTS
		jq -r 'to_entries[] | "\(.key), \(.value)"' <<< "${MESSAGE_STATUS}" | \
		while IFS=, read -r COMPONENT VALUE; do

			if [[ " ${NANOHOME_NOT_MONITORED_COMPONENTS//,/ } " =~ " ${COMPONENT} " ]]; then
				continue
			fi

			# get connected state and description of component
			# publish connected=false for new components
			CONNECTED=$(
				mosquitto_sub "${MQTT_CONNECTION_STRING[@]}" \
				--retained-only --nodelay --quiet -C 1 -W 1 \
				-t "${DEVICEID}/status/${COMPONENT}/connected"
			)

			CONNECTEDVALUE=$(
				convert_value "${CONNECTED}"
			)

			if [[ $CONNECTEDVALUE -eq 0 ]]; then
				mosquitto_pub -r "${MQTT_CONNECTION_STRING[@]}" \
				-t "${DEVICEID}/status/${COMPONENT}/connected" \
				-m "false"
			fi

			# get description of component
			DESCRIPTION=$(
				mosquitto_sub "${MQTT_CONNECTION_STRING[@]}" \
				--retained-only --nodelay --quiet -C 1 -W 1  \
				-t "${DEVICEID}/status/${COMPONENT}/description"
			)
			
			DESCRIPTION_ESCAPED="${DESCRIPTION// /\\ }"

			# publish output value for nanohome dashboard
			# TODO: Braucht es den Output fürs Dashbaord? > 
			# Falls ja, kann das der measurement-teil übernehmen?
			SWITCHPOWER=$(
				jq -r '.apower' <<< "${VALUE}"
			)

			CURRENTPOSITION=$(
				jq -r '.current_pos' <<< "${VALUE}"
			)

			[ "${SWITCHPOWER}" != "null" ] && OUTPUTVALUE="${SWITCHPOWER}"
			[ "${CURRENTPOSITION}" != "null" ] && OUTPUTVALUE="${CURRENTPOSITION}"

			mosquitto_pub -r "${MQTT_CONNECTION_STRING[@]}" \
			-t "${DEVICEID}/status/${COMPONENT}/output" \
			-m "${OUTPUTVALUE}"

			# write measurements into influxdb
			[[ "${DESCRIPTION}" == "null" ]] && influx write \
			-b "${INFLUX_BUCKET_DEVICES}" \
			-p s "${DEVICEID},Component=${COMPONENT} Online=${ONLINEVALUE},Connected=${CONNECTEDVALUE},Output=${OUTPUTVALUE}"

			[[ "${DESCRIPTION}" != "null" ]] && influx write \
			-b "${INFLUX_BUCKET_DEVICES}" \
			-p s "${DEVICEID},Component=${COMPONENT},Description=${DESCRIPTION_ESCAPED} Online=${ONLINEVALUE},Connected=${CONNECTEDVALUE},Output=${OUTPUTVALUE}"

			# LOG
			[[ $LOG_SERVICES ]] && echo "[Devwatcher] Component: ${DEVICEID} - ${COMPONENT}" >> /proc/1/fd/1
			# [[ $LOG_SERVICES ]] && jq <<< "${MESSAGE_STATUS}" >> /proc/1/fd/1
		done
	done

	sleep $NANOHOME_DEVWATCHER_INTERVAL
done
