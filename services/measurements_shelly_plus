#!/bin/bash
#/////////////////////////////////////////////////////////////////////////////////////
# Nanohome Shelly Plus measurement watcher
#
# Subscribe to the status topic of all devices
# Check the connected status of each component not filtered in config
# For each connected component parse the status json and write values to influxdb
#/////////////////////////////////////////////////////////////////////////////////////

MQTT_CONNECTION_STRING=(
	-h "${MQTT_SERVER}"
	-u "${MQTT_USER}"
	-P "${MQTT_PASSWORD}"
)

# convert string-boolean to 1 or 0
convert_value() {
	[[ "$1" == "true" ]] || [[ "$1" == "on" ]] && echo 1 || echo 0
}

# Main Service
mosquitto_sub "${MQTT_CONNECTION_STRING[@]}" \
	--nodelay --quiet -F "%j" \
	-t "${MQTT_TOPIC_STATUS}" | \
	while read -r COMPONENTSTATUS; do

	STATUSTOPIC=$( jq -r '.topic' <<< "${COMPONENTSTATUS}" )
	STATUSMESSAGE=$( jq -r '.payload' <<< "${COMPONENTSTATUS}" )
	DEVICEID=$( cut -d '/' -f 1 <<< "${STATUSTOPIC}" )
	COMPONENT=$( cut -d '/' -f 3 <<< "${STATUSTOPIC}" )

	# get connected state and description of component
	CONNECTED=$(
		mosquitto_sub "${MQTT_CONNECTION_STRING[@]}" \
		--retained-only --nodelay --quiet -C 1 -W 1 \
		-t "${DEVICEID}/status/${COMPONENT}/connected"
	)

	CONNECTEDVALUE=$(
			convert_value "${CONNECTED}"
	)

	DESCRIPTION=$(
			mosquitto_sub "${MQTT_CONNECTION_STRING[@]}" \
			--retained-only --nodelay --quiet -C 1 -W 1 \
			-t "${DEVICEID}/status/${COMPONENT}/description"
	)

	DESCRIPTION_ESCAPED="${DESCRIPTION// /\\ }"

	# only monitor connected components and those with a description
	if [[ $CONNECTEDVALUE -eq 0 ]] || [[ -z "${DESCRIPTION}" ]]; then
		continue
	fi

	# Pprse message payload
	POWER=$( jq -r '.apower' <<< "${STATUSMESSAGE}" )
	ENERGY=$(jq -r '.aenergy.total' <<< "${STATUSMESSAGE}" )
	VOLTAGE=$( jq -r '.voltage' <<< "${STATUSMESSAGE}" )
	CURRENT=$( jq -r '.current' <<< "${STATUSMESSAGE}" )
	DEVICETEMP=$( jq -r '.temperature.tC' <<< "${STATUSMESSAGE}" )
	CURRENTPOSITION=$( jq -r '.current_pos' <<< "${STATUSMESSAGE}" )
	ROOM_TEMP=$( jq -r '.tC' <<< "${STATUSMESSAGE}" )
	ROOM_HUM=$( jq -r '.rh' <<< "${STATUSMESSAGE}" )
	BATTERY=$( jq -r '.battery.percent' <<< "${STATUSMESSAGE}" )

	# TODO: Nur string zum schreiben vorbereiten

	PAYLOAD="${DESCRIPTION_ESCAPED} "

	# write fields with value to influxdb
	[[ "${POWER}" != "null" ]] && PAYLOAD+="Power=${POWER},"
	[[ "${ENERGY}" != "null" ]] && PAYLOAD+="Energy=${ENERGY},"
	[[ "${VOLTAGE}" != "null" ]] && PAYLOAD+="Voltage=${VOLTAGE},"
	[[ "${CURRENT}" != "null" ]] && PAYLOAD+="Current=${CURRENT},"
	[[ "${DEVICETEMP}" != "null" ]] && PAYLOAD+="DeviceTemp=${DEVICETEMP},"
	[[ "${ROOM_TEMP}" != "null" ]] && PAYLOAD+="Temperature=${ROOM_TEMP},"
	[[ "${ROOM_HUM}" != "null" ]] && PAYLOAD+="Humidity=${ROOM_HUM},"
	[[ "${BATTERY}" != "null" ]] && PAYLOAD+="Battery=${BATTERY},"

	if [[ "${PAYLOAD}" != "${DESCRIPTION_ESCAPED} " ]]; then
		PAYLOAD="${PAYLOAD%,}"
		influx write -b "${INFLUX_BUCKET_MEASUREMENTS}" -p s "${PAYLOAD}"
	else
		echo "No suitable payload found"
	fi

	# Debug
	[[ $LOG_SERVICES ]] && echo "[Measurements] Added: ${DEVICEID} - ${COMPONENT}"
	# [[ $LOG_SERVICES ]] && jq <<< "${STATUSMESSAGE}"
	
done
