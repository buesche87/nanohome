#!/bin/bash
#/////////////////////////////////////////////////////////////////////////////////////
# Nanohome Shelly Plus measurement watcher
#
# Subscribe to the status topic of all devices
# Check the connected status of each component not filtered in config
# For each connected component parse the status json and write values to influxdb
#/////////////////////////////////////////////////////////////////////////////////////

# Convert string-boolean to 1 or 0
convert_value() {
	[[ "$1" == "true" ]] || [[ "$1" == "on" ]] && echo 1 || echo 0
}

MQTT_CONNECTION_STRING=(
	-h "${MQTT_SERVER}"
	-u "${MQTT_USER}"
	-P "${MQTT_PASSWORD}"
)

MQTT_SUBSCRIBE_RETAINED=(
	--retained-only
	--nodelay
	--quiet
	-F "%j"
	-W 1
)

MQTT_SUBSCRIBE_JSON=(
	--nodelay
	--quiet
	-F "%j"
)

# Main Service
mosquitto_sub \
	"${MQTT_CONNECTION_STRING[@]}" \
	"${MQTT_SUBSCRIBE_JSON[@]}" \
	-t "${MQTT_TOPIC_STATUS}" | \
	while read -r COMPONENTSTATUS; do

	# Extract information from mosquitto subscription
	STATUSTOPIC=$( jq -r '.topic' <<< "${COMPONENTSTATUS}" )
	STATUSMESSAGE=$( jq -r '.payload' <<< "${COMPONENTSTATUS}" )
	DEVICEID=$( cut -d '/' -f 1 <<< "${STATUSTOPIC}" )
	COMPONENT=$( cut -d '/' -f 3 <<< "${STATUSTOPIC}" )

	jq -r 'to_entries[] | "\(.key), \(.value)"' <<< "${STATUSMESSAGE}" | \
	while IFS=, read -r COMPONENT VALUE; do

		# Don't monitor components excluded in config
		if [[ " ${NOT_MONITORED_COMPONENTS//,/ } " == *" $COMPONENT "* ]]; then
			continue
		fi

		MESSAGE_CONNECTED=$(
			mosquitto_sub \
			"${MQTT_CONNECTION_STRING[@]}" \
			"${MQTT_SUBSCRIBE_RETAINED[@]}" \
			-t "${DEVICEID}/status/${COMPONENT}/connected"
		)
		
		CONNECTEDVALUE=$(
			convert_value "${MESSAGE_CONNECTED}"
		)

		# Get description, connected status and current output
		MESSAGE_DESCRIPTION=$(
			mosquitto_sub \
			"${MQTT_CONNECTION_STRING[@]}" \
			"${MQTT_SUBSCRIBE_RETAINED[@]}" \
			-t "${DEVICEID}/status/${COMPONENT}/description"
		)
		
		DESCRIPTION="${MESSAGE_DESCRIPTION// /\\ }"

		# Only monitor connected devices and those with a description
		if [[ $CONNECTEDVALUE -eq 0 ]] || [ -z "${DESCRIPTION}" ]; then
			continue
		fi		

		# Parse message payload
		POWER=$( jq -r '.apower' <<< "${STATUSMESSAGE}" )
		ENERGY=$(jq -r '.aenergy.total' <<< "${STATUSMESSAGE}" )
		VOLTAGE=$( jq -r '.voltage' <<< "${STATUSMESSAGE}" )
		CURRENT=$( jq -r '.current' <<< "${STATUSMESSAGE}" )
		COMPONENT_TEMP=$( jq -r '.temperature.tC' <<< "${STATUSMESSAGE}" )
		CURRENTPOSITION=$( jq -r '.current_pos' <<< "${STATUSMESSAGE}" )
		ROOM_TEMP=$( jq -r '.tC' <<< "${STATUSMESSAGE}" )
		ROOM_HUM=$( jq -r '.rh' <<< "${STATUSMESSAGE}" )
		BATTERY=$( jq -r '.battery.percent' <<< "${STATUSMESSAGE}" )

		# Write payload into influxdb
		PAYLOAD='{
			"measurement": "'"${DESCRIPTION}"'",
			"tags": {
				"Device": "'"${DEVICEID}"'",
				"Component": "'"${COMPONENT}"'"
			},
			"fields": {}
		}'


		[[ "${POWER}" != "null" ]] && PAYLOAD=$(
			jq --arg value "${POWER}" '.fields.Power = $value' <<< "${PAYLOAD}"
		)

		[[ "${ENERGY}" != "null" ]] && PAYLOAD=$(
			jq --arg value "${ENERGY}" '.fields.Energy = $value' <<< "${PAYLOAD}"
		)

		[[ "${VOLTAGE}" != "null" ]] && PAYLOAD=$(
			jq --arg value "${VOLTAGE}" '.fields.Voltage = $value' <<< "${PAYLOAD}"
		)

		[[ "${CURRENT}" != "null" ]] && PAYLOAD=$(
			jq --arg value "${CURRENT}" '.fields.Current = $value' <<< "${PAYLOAD}"
		)

		[[ "${COMPONENT_TEMP}" != "null" ]] && PAYLOAD=$(
			jq --arg value "${COMPONENT_TEMP}" '.fields.ComponentTemp = $value' <<< "${PAYLOAD}"
		)

		[[ "${ROOM_TEMP}" != "null" ]] && PAYLOAD=$(
			jq --arg value "${ROOM_TEMP}" '.fields.Temperature = $value' <<< "${PAYLOAD}"
		)

		[[ "${ROOM_HUM}" != "null" ]] && PAYLOAD=$(
			jq --arg value "${ROOM_HUM}" '.fields.Humidity = $value' <<< "${PAYLOAD}"
		)

		[[ "${BATTERY}" != "null" ]] && PAYLOAD=$(
			jq --arg value "${BATTERY}" '.fields.Battery = $value' <<< "${PAYLOAD}"
		)

		# Insert values into influxdb
		influx write -b "${INFLUXDB_BUCKET_MEASUREMENTS}" -f - <<< "${PAYLOAD}"
	done
done
