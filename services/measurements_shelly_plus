#!/bin/bash
#/////////////////////////////////////////////////////////////////////////////////////
# nanohome - measurements service
#
# Get measurements from shelly gen3 pm devices
# - Subscribe to the status topic of all devices
# - Filter messages from not connected or not monitored components
# - Parse the json payload and write it to the influx bucket "Measurements"
#/////////////////////////////////////////////////////////////////////////////////////

# Configuration
MQTT_CONNECTION_STRING=(
	-h "${MQTT_SERVER}"
	-u "${MQTT_USER}"
	-P "${MQTT_PASSWORD}"
)

# Convert string-boolean to 1 or 0
convert_value() {
	[[ "$1" == "true" ]] || [[ "$1" == "on" ]] && echo 1 || echo 0
}

# Infinitely subscribe to "+/status/+"
mosquitto_sub "${MQTT_CONNECTION_STRING[@]}" --nodelay --quiet -F "%j" \
	-t "${MQTT_TOPIC_STATUS}" | while read -r COMPONENTSTATUS; do

	# Extract payload and device details from topic 
	STATUSTOPIC=$( jq -r '.topic' <<< "${COMPONENTSTATUS}" )
	STATUSMESSAGE=$( jq -r '.payload' <<< "${COMPONENTSTATUS}" )
	DEVICEID=$( cut -d '/' -f 1 <<< "${STATUSTOPIC}" )
	COMPONENT=$( cut -d '/' -f 3 <<< "${STATUSTOPIC}" )

	# Get connected state and description of component
	CONNECTED=$(
		mosquitto_sub "${MQTT_CONNECTION_STRING[@]}" \
		--retained-only --nodelay --quiet -C 1 -W 1 \
		-t "${DEVICEID}/status/${COMPONENT}/connected"
	)

	CONNECTEDVALUE=$(
		convert_value "${CONNECTED}"
	)

	# Publish connected = false for newly discovered devices
	if [[ $CONNECTEDVALUE -eq 0 ]]; then
		mosquitto_pub -r "${MQTT_CONNECTION_STRING[@]}" \
		-t "${DEVICEID}/status/${COMPONENT}/connected" \
		-m "false"
	fi

	DESCRIPTION=$(
		mosquitto_sub "${MQTT_CONNECTION_STRING[@]}" \
		--retained-only --nodelay --quiet -C 1 -W 1 \
		-t "${DEVICEID}/status/${COMPONENT}/description"
	)

	DESCRIPTION_ESCAPED="${DESCRIPTION// /\\ }"



	# DEVICES


	# Write device into influx bucket "Devices"
	[[ "${DESCRIPTION}" == "null" ]] && influx write \
	-b "${INFLUX_BUCKET_DEVICES}" \
	-p s "${DEVICEID},Component=${COMPONENT} Connected=${CONNECTEDVALUE}"

	[[ "${DESCRIPTION}" != "null" ]] && influx write \
	-b "${INFLUX_BUCKET_DEVICES}" \
	-p s "${DEVICEID},Component=${COMPONENT},Description=${DESCRIPTION_ESCAPED} Connected=${CONNECTEDVALUE}"




	# MEASUREMENTS


	# Only monitor connected components and those with a description
	if [[ $CONNECTEDVALUE -eq 0 ]] || [[ -z "${DESCRIPTION}" ]]; then
		continue
	fi


	# Parse message payload
	POWER=$( jq -r '.apower' <<< "${STATUSMESSAGE}" )
	ENERGY=$(jq -r '.aenergy.total' <<< "${STATUSMESSAGE}" )
	VOLTAGE=$( jq -r '.voltage' <<< "${STATUSMESSAGE}" )
	CURRENT=$( jq -r '.current' <<< "${STATUSMESSAGE}" )
	DEVICETEMP=$( jq -r '.temperature.tC' <<< "${STATUSMESSAGE}" )
	CURRENTPOSITION=$( jq -r '.current_pos' <<< "${STATUSMESSAGE}" )
	ROOM_TEMP=$( jq -r '.tC' <<< "${STATUSMESSAGE}" )
	ROOM_HUM=$( jq -r '.rh' <<< "${STATUSMESSAGE}" )
	BATTERY=$( jq -r '.battery.percent' <<< "${STATUSMESSAGE}" )


	# Publish current output value (used in home dashboard)
	[ "${POWER}" != "null" ] && OUTPUTVALUE="${SWITCHPOWER}"
	[ "${CURRENTPOSITION}" != "null" ] && OUTPUTVALUE="${CURRENTPOSITION}"

	mosquitto_pub -r "${MQTT_CONNECTION_STRING[@]}" \
	-t "${DEVICEID}/status/${COMPONENT}/output" \
	-m "${OUTPUTVALUE}"


	# Prepare string for influx cli (line protocol)
	PAYLOAD="${DESCRIPTION_ESCAPED} "

	[[ "${POWER}" != "null" ]] && PAYLOAD+="Power=${POWER},"
	[[ "${ENERGY}" != "null" ]] && PAYLOAD+="Energy=${ENERGY},"
	[[ "${VOLTAGE}" != "null" ]] && PAYLOAD+="Voltage=${VOLTAGE},"
	[[ "${CURRENT}" != "null" ]] && PAYLOAD+="Current=${CURRENT},"
	[[ "${DEVICETEMP}" != "null" ]] && PAYLOAD+="DeviceTemp=${DEVICETEMP},"
	[[ "${ROOM_TEMP}" != "null" ]] && PAYLOAD+="Temperature=${ROOM_TEMP},"
	[[ "${ROOM_HUM}" != "null" ]] && PAYLOAD+="Humidity=${ROOM_HUM},"
	[[ "${BATTERY}" != "null" ]] && PAYLOAD+="Battery=${BATTERY},"

	# Write measurement into influx bucket "Measurements"
	if [[ "${PAYLOAD}" != "${DESCRIPTION_ESCAPED} " ]]; then
		PAYLOAD="${PAYLOAD%,}"
		influx write -b "${INFLUX_BUCKET_MEASUREMENTS}" -p s "${PAYLOAD}"
		[[ $LOG_SERVICES ]] && echo -e "${LOG_SUCC} Measurements: Added - ${DEVICEID} - ${COMPONENT}" >> /proc/1/fd/1
	else
		[[ $LOG_SERVICES ]] && echo -e "${LOG_WARN} Measurements: No payload - ${DEVICEID} - ${COMPONENT}" >> /proc/1/fd/1
	fi
	
	[[ $LOG_DEBUG ]] && jq <<< "${STATUSMESSAGE}"
done
