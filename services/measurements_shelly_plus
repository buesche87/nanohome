#!/bin/bash
#/////////////////////////////////////////////////////////////////////////////////////
# Nanohome Shelly Plus measurement watcher
#
# Subscribe to the status topic of all devices
# Check the connected status of each component not filtered in config
# For each connected component parse the status json and write values to influxdb
#/////////////////////////////////////////////////////////////////////////////////////

# Convert string-boolean to 1 or 0
convert_value() {
	[[ "$1" == "true" ]] || [[ "$1" == "on" ]] && echo 1 || echo 0
}

# Main Service
mosquitto_sub -v -h "${MQTT_SERVICE}" -u "${MQTT_USER}" -P "${MQTT_PASSWORD}" -t "${TOPIC_STATUS}" -q 2 | while read -r DEVICESTATUS; do

    # Extract information from mosquitto_sub
    STATUSTOPIC=$(echo "${DEVICESTATUS}" | cut -d ' ' -f 1)
    STATUSMESSAGE=$(echo "${DEVICESTATUS}" | cut -d ' ' -f 2-)
	DEVICEID=$(echo "${STATUSTOPIC}" | cut -d '/' -f 1)
	COMPONENT=$(echo "${STATUSTOPIC}" | cut -d '/' -f 3)

	# Don't monitor components excluded in config
	IFS=',' read -r -a COMPONENTSARRAY <<< "${NOT_MONITORED_COMPONENTS}"
	for item in "${COMPONENTSARRAY[@]}"; do
		[[ "$COMPONENT" == "$item" ]] && break
	done

	# Get connected status of component
	CONNECTEDTOPIC="${DEVICEID}/status/${COMPONENT}/connected"
	CONNECTEDMESSAGE=$(mosquitto_sub -h "${MQTT_SERVICE}" -u "${MQTT_USER}" -P "${MQTT_PASSWORD}" -t "${CONNECTEDTOPIC}" -C 1 -W 1 --retained-only --nodelay --quiet)
	CONNECTEDVALUE=$(convert_value "${CONNECTEDMESSAGE}")
	
	# Get component description for measurement in influxdb
	DESCRIPTIONTOPIC="${DEVICEID}/status/${COMPONENT}/description"
	DESCRIPTIONMESSAGE=$(mosquitto_sub -h "${MQTT_SERVICE}" -u "${MQTT_USER}" -P "${MQTT_PASSWORD}" -t "${DESCRIPTIONTOPIC}" -C 1 -W 1 --retained-only --nodelay --quiet)
	DESCRIPTION="${DESCRIPTIONMESSAGE// /\\ }"
	
	# Check if message is a json string, if component is connected and contains a description
	if jq -e . >/dev/null 2>&1 <<< "${STATUSMESSAGE}" && [[ $CONNECTEDVALUE -eq 1 ]] && [ -n $DESCRIPTION ] ; then

		# Parse message payload
		POWER=$(echo "${STATUSMESSAGE}" | jq -r .apower )
		ENERGY=$(echo "${STATUSMESSAGE}" | jq -r .aenergy.total )
		VOLTAGE=$(echo "${STATUSMESSAGE}" | jq -r .voltage )
		CURRENT=$(echo "${STATUSMESSAGE}" | jq -r .current )
		TEMPERATURE=$(echo "${STATUSMESSAGE}" | jq -r .temperature.tC )
		CURRENTPOSITION=$(echo "${STATUSMESSAGE}" | jq -r .current_pos )
		TC=$(echo "${STATUSMESSAGE}" | jq -r .tC )
		RH=$(echo "${STATUSMESSAGE}" | jq -r .rh )
		BATTERY=$(echo "${STATUSMESSAGE}" | jq -r .battery.percent )

		# Insert values into influxdb
		[[ "${POWER}" != "null" ]] && influx write -b "${INFLUXDB_BUCKET_MEASUREMENTS}" -p s "${DESCRIPTION} Power=${POWER}"
		[[ "${ENERGY}" != "null" ]] && influx write -b "${INFLUXDB_BUCKET_MEASUREMENTS}" -p s "${DESCRIPTION} Energy=${ENERGY}"
		[[ "${VOLTAGE}" != "null" ]] && influx write -b "${INFLUXDB_BUCKET_MEASUREMENTS}" -p s "${DESCRIPTION} Voltage=${VOLTAGE}"
		[[ "${CURRENT}" != "null" ]] && influx write -b "${INFLUXDB_BUCKET_MEASUREMENTS}" -p s "${DESCRIPTION} Current=${CURRENT}"
		[[ "${TEMPERATURE}" != "null" ]] && influx write -b "${INFLUXDB_BUCKET_MEASUREMENTS}" -p s "${DESCRIPTION} Temperature=${TEMPERATURE}"
		[[ "${CURRENTPOSITION}" != "null" ]] && influx write -b "${INFLUXDB_BUCKET_MEASUREMENTS}" -p s "${DESCRIPTION} Position=${CURRENTPOSITION}"
		[[ "${TC}" != "null" ]] && influx write -b "${INFLUXDB_BUCKET_MEASUREMENTS}" -p s "${DESCRIPTION} Temperature=${TC}"
		[[ "${RH}" != "null" ]] && influx write -b "${INFLUXDB_BUCKET_MEASUREMENTS}" -p s "${DESCRIPTION} Humidity=${RH}"
		[[ "${BATTERY}" != "null" ]] && influx write -b "${INFLUXDB_BUCKET_MEASUREMENTS}" -p s "${DESCRIPTION} Battery=${BATTERY}"
	fi
done
