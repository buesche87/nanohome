#!/bin/bash
#/////////////////////////////////////////////////////////////////////////////////////
# nanohome - Devicewatcher service legacy
#
# Discover shelly gen 1 devices
# - Subscribe to all devices "input" topic
# - Get and filter components not monitored with nanohome
# - Write component infos into influx bucket "Devices"
#/////////////////////////////////////////////////////////////////////////////////////

# MQTT connection string with credentials
MQTT_CONNECTION_STRING=(
	-h "${MQTT_SERVER}"
	-u "${MQTT_USER}"
	-P "${MQTT_PASSWORD}"
)

# MQTT retained message subscription options
MQTT_RETAINED_OPTIONS=(
	--retained-only
	--nodelay
	--quiet
	-C 1
	-W 1
)

#===============================================================
# Functions
#===============================================================

# Convert string-boolean to 1 or 0
convert_value() {
	[[ "$1" == "true" ]] || [[ "$1" == "on" ]] && echo 1 || echo 0
}

publish_payload() {
	local PAYLOAD=$1
	local BUCKET=$2

	curl -s --request POST "${INFLUXDB_HOST}/api/v2/write?org=${INFLUXDB_ORG}&bucket=${BUCKET}&precision=s" \
	--header "Authorization: Token ${INFLUXDB_TOKEN}" \
	--header "Content-Type: text/plain" \
	--data-binary "${PAYLOAD}" 
}

#===============================================================
# Infinitely subscribe to "shellies/+/+/+"
#===============================================================

mosquitto_sub "${MQTT_CONNECTION_STRING[@]}" --nodelay --quiet -F "%j" -t "shellies/+/+/+" | 
while read -r DEVICESTATUS; do

	# Extract payload and topic from json formatted message
	OUTPUT=$( jq -r '.payload' <<< "${DEVICESTATUS}" )
	STATUSTOPIC=$( jq -r '.topic' <<< "${DEVICESTATUS}" )
	DEVICEID=$( cut -d '/' -f 2 <<< "${STATUSTOPIC}" )
	COMPONENT=$( cut -d '/' -f 3 <<< "${STATUSTOPIC}" )
	COMPONENTINDEX=$( cut -d '/' -f 4 <<< "${STATUSTOPIC}" )
	COMPONENTMERGED="${COMPONENT}:${COMPONENTINDEX}"
	ONLINEVALUE=1 # Assume getting a message equals device is online

	[[ $LOG_DEBUG ]] && echo -e "${LOG_INFO} Devicewatcher Legacy: Message recived - [${DEVICEID}/${COMPONENTMERGED}]" >> /proc/1/fd/1

	#===============================================================
	# Filter components not monitored
	#===============================================================

	[[ " ${NANOHOME_NOT_MONITORED_COMPONENTS_LEGACY//,/ } " == *" ${COMPONENT} "* ]] && continue

	#===============================================================
	# Get components connected state
	#===============================================================

	CONNECTEDTOPIC="shellies/${DEVICEID}/${COMPONENT}/${COMPONENTINDEX}/connected"

	CONNECTED=$(
		mosquitto_sub "${MQTT_CONNECTION_STRING[@]}" "${MQTT_RETAINED_OPTIONS[@]}" -t "${CONNECTEDTOPIC}"
	)

	CONNECTEDVALUE=$( convert_value "${CONNECTED}" )

	if [[ $CONNECTEDVALUE -eq 0 ]]; then

		# Publish connected=false for newly discovered components, this will make them visible on the device manager dashboard
		# mosquitto_pub -r "${MQTT_CONNECTION_STRING[@]}" -t "${CONNECTEDTOPIC}" -m "false"

		# Create device ping payload
		DEVICE_PAYLOAD="${DEVICEID},Component=${COMPONENTMERGED} Online=${ONLINEVALUE},Connected=${CONNECTEDVALUE}"

		# Add device ping to influxdb "Devices" bucket
		publish_payload $DEVICE_PAYLOAD $INFLUXDB_BUCKET_DEVICES

		[[ $LOG_SERVICES ]] && echo -e "${LOG_INFO} Devicewatcher Legacy: Device ping saved to \"$INFLUXDB_BUCKET_DEVICES\" - [${DEVICE_PAYLOAD}]" >> /proc/1/fd/1
		continue
	fi

	#===============================================================
	# Get components description
	#===============================================================

	DESCRIPTIONTOPIC="shellies/${DEVICEID}/${COMPONENT}/${COMPONENTINDEX}/description"

	DESCRIPTION=$(
		mosquitto_sub "${MQTT_CONNECTION_STRING[@]}" "${MQTT_RETAINED_OPTIONS[@]}" -t "${DESCRIPTIONTOPIC}"
	)

	DESCRIPTION_ESCAPED="${DESCRIPTION// /\\ }"

	if [[ -z "${DESCRIPTION}" ]]; then

		# Create device ping payload
		DEVICE_PAYLOAD="${DEVICEID},Component=${COMPONENTMERGED} Online=${ONLINEVALUE},Connected=${CONNECTEDVALUE}"

		# Add device ping to influxdb "Devices" bucket 
		publish_payload $DEVICE_PAYLOAD $INFLUXDB_BUCKET_DEVICES

		[[ $LOG_SERVICES ]] && echo -e "${LOG_INFO} Devicewatcher Legacy: Device ping saved to \"$INFLUXDB_BUCKET_DEVICES\" - [${DEVICE_PAYLOAD}]" >> /proc/1/fd/1
		continue
	fi

	#===============================================================
	# Publish output value
	#===============================================================

	# This value will be used on the home dashboard
	OUTPUTVALUE=$( convert_value "${OUTPUT}" )
	OUTPUTTOPIC="shellies/${DEVICEID}/${COMPONENT}/${COMPONENTINDEX}/output"

	mosquitto_pub -r "${MQTT_CONNECTION_STRING[@]}" -t "${OUTPUTTOPIC}"	-m "${OUTPUTVALUE}"

	#===============================================================
	# Write measurements into influx buckets
	#===============================================================

	# InfluxDB: Write a device ping into the 'Devices' bucket
	DEVICE_PAYLOAD="${DEVICEID},Component=${COMPONENT},Description=${DESCRIPTION_ESCAPED} Online=${ONLINEVALUE},Connected=${CONNECTEDVALUE},Output=${OUTPUTVALUE}"

	# Add device ping to influxdb "Devices" bucket 
	publish_payload $DEVICE_PAYLOAD $INFLUXDB_BUCKET_DEVICES

	[[ $LOG_SERVICES ]] && echo -e "${LOG_INFO} Devicewatcher Legacy: Device ping saved to \"$INFLUXDB_BUCKET_DEVICES\" - [${DEVICE_PAYLOAD}]" >> /proc/1/fd/1
done
