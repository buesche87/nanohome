#!/bin/bash
#/////////////////////////////////////////////////////////////////////////////////////
# nanohome - standbymanager service
#
# Turn off output if power goes below threshold
# - Subscribe to the components status topic
# - Extract current output power from every message
# - Check if power is below threshold 
# - Turn off output if so
#/////////////////////////////////////////////////////////////////////////////////////
CONFIG=$1

JSONCONFIG=$(
	jq '.' <<< "${CONFIG}" 
)

[[ $LOG_DEBUG ]] && echo -e "${LOG_INFO} Standbymanager: Starting with config" >> /proc/1/fd/1
[[ $LOG_DEBUG ]] && jq <<< "${JSONCONFIG}"

# MQTT connection string with credentials
MQTT_CONNECTION_STRING=(
	-h "${MQTT_SERVER}"
	-u "${MQTT_USER}"
	-P "${MQTT_PASSWORD}"
)

# Extract payload and device details from json formatted message
DEVICEID=$( jq -r '.deviceId' <<< "${JSONCONFIG}" )
COMPONENT=$( jq -r '.component' <<< "${JSONCONFIG}" )
DESCRIPTION=$( jq -r '.description' <<< "${JSONCONFIG}" )
THRESHOLD=$( jq -r .threshold <<< "${JSONCONFIG}" )
STANDBYWAIT=$( jq -r .wait <<< "${JSONCONFIG}" )
LEGACY=$( jq -r '.legacy' <<< "${JSONCONFIG}" )
[[ "${STANDBYWAIT}" == "null" ]] && STANDBYWAIT=1


[[ $LOG_DEBUG ]] && echo -e "${LOG_INFO} Standbymanager: DEVICEID ${DEVICEID}" >> /proc/1/fd/1
[[ $LOG_DEBUG ]] && echo -e "${LOG_INFO} Standbymanager: COMPONENT ${COMPONENT}" >> /proc/1/fd/1
[[ $LOG_DEBUG ]] && echo -e "${LOG_INFO} Standbymanager: COMPONENT ${DESCRIPTION}" >> /proc/1/fd/1

# Define mqtt topics
if [[ "${LEGACY}" == "true" ]]; then
	COMPONENTDEV=$( cut -d ':' -f 1 <<< "${COMPONENT}" )
	COMPONENTINDEX=$( cut -d ':' -f 2 <<< "${COMPONENT}" )

	STANDBYTOPIC="nanohome/standby/${DESCRIPTION}"
	STATUSTOPIC="shellies/${DEVICEID}/${COMPONENTDEV}/${COMPONENTINDEX}/power"
	CONTROLTOPIC="shellies/${DEVICEID}/${COMPONENTDEV}/${COMPONENTINDEX}/command"
else 
	STANDBYTOPIC="nanohome/standby/${DESCRIPTION}"
	STATUSTOPIC="${DEVICEID}/status/${COMPONENT}"
	CONTROLTOPIC="${DEVICEID}/command/${COMPONENT}"
fi

# Get last published standby state
get_last_state() {

	local currentStateJson=$(
		mosquitto_sub "${MQTT_CONNECTION_STRING[@]}" \
		"${MQTT_RETAINED_OPTIONS[@]}" \
		-t "${STANDBYTOPIC}"
	)

	local state=$( jq -r .state <<< "${currentStateJson}" )
	return "${state}"
}

# Turn off an output
turn_off_device() {
	mosquitto_pub "${MQTT_CONNECTION_STRING[@]}" -t "${CONTROLTOPIC}" -m "off"
}

# Update state in nanohome
update_state() {
	local json=$1
	mosquitto_pub -r "${MQTT_CONNECTION_STRING[@]}" -t "${STANDBYTOPIC}" -m "${json}"
}

#===============================================================
# Infinitely subscribe to components status/power topic
#===============================================================

mosquitto_sub "${MQTT_CONNECTION_STRING[@]}" -t "${STATUSTOPIC}" |
while read -r CURRENTPOWER; do

	# Extract current power from json formatted message
	if [[ "${LEGACY}" == "false" ]]; then
		CURRENTPOWER=$( jq -r .apower <<< "${CURRENTPOWER}" )
	fi

	# Get last standby state
	LAST_STATE=$( get_last_state )

	# Manage standby - don't kill the device if it just started
	if awk 'BEGIN { exit !('$CURRENTPOWER' == 0) }'; then

		NEW_STATE="off"
		LOGMESSAGE="Off, nothing to do"
	
	elif awk 'BEGIN { exit !('$CURRENTPOWER' < '$THRESHOLD') }'; then
		case "${LAST_STATE}" in
			"off")
				NEW_STATE="on"
				LOGMESSAGE="Just started"
				sleep $STANDBYWAIT
				;;
			"on")
				NEW_STATE="off"
				LOGMESSAGE="Below threshold - turning off"
				turn_off_device
				;;
			*)
				NEW_STATE="off"
				LOGMESSAGE="Something happened that shouldn't"
				;;
		esac
	elif awk 'BEGIN { exit !('$CURRENTPOWER' > '$THRESHOLD') }'; then
		case "${LAST_STATE}" in
			"off")
				NEW_STATE="on"
				LOGMESSAGE="Just started"
				sleep $STANDBYWAIT
				;;
			"on")
				NEW_STATE="on"
				LOGMESSAGE="On - nothing to do"
				;;
			*)
				NEW_STATE="off"
				LOGMESSAGE="Something happened that shouldn't"
				;;
		esac
	fi

	# Update the json with a new state and publish it
	if [[ "${NEW_STATE}" != "${LAST_STATE}" ]]; then
				
		JSONCONFIG_UPDATED=$(
			jq --arg state "${NEW_STATE}" '.state = "$state"' <<< "${JSONCONFIG}"
		)

		update_state "${JSONCONFIG_UPDATED}"
	fi

	# Log
	[[ $LOG_SERVICE ]] && echo -e "${LOG_INFO} Standbymanager: ${DESCRIPTION} - ${LOGMESSAGE}" >> /proc/1/fd/1
done
