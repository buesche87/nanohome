#!/bin/bash
#/////////////////////////////////////////////////////////////////////////////////////
# nanohome - remove_component
#
# Remove a component from nanohome
# - Clear its measurements from influxdb
# - Delete its retained mqtt messages
# - Remove crontab entries
#/////////////////////////////////////////////////////////////////////////////////////
DESCRIPTION="$1"

# MQTT connection string with credentials
MQTT_CONNECTION_STRING=(
	-h "${MQTT_SERVER}"
	-u "${MQTT_USER}"
	-P "${MQTT_PASSWORD}"
)

# Load component config from "nanohome/devices/"
PUBLISHED_CONFIG_JSON=$(
    mosquitto_sub "${MQTT_CONNECTION_STRING[@]}" \
	--retained-only --quiet -C 1 -W 1 \
    -t "${MQTT_TOPIC_DEVICES}/${DESCRIPTION}"
)

# Exit if no config found
if [[ -z "${PUBLISHED_CONFIG_JSON}" ]]; then
    [[ $LOG_EXEC ]] && echo -e "${LOG_ERRO} Nanohome: No retained messages found on \"${MQTT_TOPIC_DEVICES}/${DESCRIPTION}\"" >> /proc/1/fd/1
    exit 1
fi

# Extract payload and device details from topic
DEVICEID=$( jq -r '.deviceId' <<< "${PUBLISHED_CONFIG_JSON}" )
COMPONENT=$( jq -r '.component' <<< "${PUBLISHED_CONFIG_JSON}" )
DESCRIPTION=$( jq -r '.description' <<< "${PUBLISHED_CONFIG_JSON}" )
LEGACY=$( jq -r '.legacy' <<< "${PUBLISHED_CONFIG_JSON}" )

# Clear Measurement
if [ -n "${DESCRIPTION}" ]; then
	influx delete --bucket "${INFLUX_BUCKET_MEASUREMENTS}" \
	  --start '1970-01-01T00:00:00Z' \
	  --stop "$(date --utc +"%Y-%m-%dT%H:%M:%SZ")" \
	  --predicate "_measurement=\"${DESCRIPTION}\""

	[[ $LOG_EXEC ]] && echo -e "${LOG_SUCC} Nanohome: Measurements for \"${DESCRIPTION}\" cleared" >> /proc/1/fd/1
fi

# Prepare mqtt topics to be cleared
DEVICETOPIC="${MQTT_TOPIC_DEVICES}/${DESCRIPTION}"
STANDBYTOPIC="${MQTT_TOPIC_STANDBY}/${DESCRIPTION}"
TIMERTOPIC="${MQTT_TOPIC_TIMER}/${DESCRIPTION}"

if [ "${LEGACY}" == "true" ]; then
	COMPONENTNAME=$( cut -d ':' -f 1 <<< "${COMPONENT}" )
	COMPONENTINDEX=$( cut -d ':' -f 2 <<< "${COMPONENT}" )

	CONNECTEDTOPIC="shellies/${DEVICEID}/${COMPONENTNAME}/${COMPONENTINDEX}/connected"
	DESCRIPTIONTOPIC="shellies/${DEVICEID}/${COMPONENTNAME}/${COMPONENTINDEX}/description"
	OUTPUTTOPIC="shellies/${DEVICEID}/${COMPONENTNAME}/${COMPONENTINDEX}/output"
	ENERGYTOPIC="shellies/${DEVICEID}/${COMPONENTNAME}/${COMPONENTINDEX}/energy"
	POWERTOPIC="shellies/${DEVICEID}/${COMPONENTNAME}/${COMPONENTINDEX}/power"
	DEVICETEMPTOPIC="shellies/${DEVICEID}/${COMPONENTNAME}/${COMPONENTINDEX}/temperature"
else
	CONNECTEDTOPIC="${DEVICEID}/status/${COMPONENT}/connected"
	DESCRIPTIONTOPIC="${DEVICEID}/status/${COMPONENT}/description"
	OUTPUTTOPIC="${DEVICEID}/status/${COMPONENT}/output"
fi

# Clean mqtt topics
mosquitto_pub -r "${MQTT_CONNECTION_STRING[@]}" -t "${DEVICETOPIC}" -m ""
mosquitto_pub -r "${MQTT_CONNECTION_STRING[@]}" -t "${STANDBYTOPIC}" -m ""
mosquitto_pub -r "${MQTT_CONNECTION_STRING[@]}" -t "${TIMERTOPIC}" -m ""
mosquitto_pub -r "${MQTT_CONNECTION_STRING[@]}" -t "${CONNECTEDTOPIC}" -m ""
mosquitto_pub -r "${MQTT_CONNECTION_STRING[@]}" -t "${DESCRIPTIONTOPIC}" -m ""
mosquitto_pub -r "${MQTT_CONNECTION_STRING[@]}" -t "${OUTPUTTOPIC}" -m ""

# Remove component from crontab file
if [ "${LEGACY}" == "true" ]; then
	sed -i "|${DEVICE}/${COMPONENTNAME}/${COMPONENTINDEX}|d" "${NANOHOME_CRONTABS}"
else
	sed -i "|${DEVICE}/${COMPONENT}|d" "${NANOHOME_CRONTABS}"
fi

# Kill running services for legacy devices
if [ "${LEGACY}" == "true" ]; then
	ENERGYPID=$(ps | grep "${ENERGYTOPIC}" | grep -v "grep" | awk '{print $1}')
	POWERPID=$(ps | grep "${POWERTOPIC}" | grep -v "grep" | awk '{print $1}')
	TEMPPID=$(ps | grep "${DEVICETEMPTOPIC}" | grep -v "grep" | awk '{print $1}')
	[[ -n "${ENERGYPID}" ]] && kill -9 "${ENERGYPID}"
	[[ -n "${POWERPID}" ]] && kill -9 "${POWERPID}"
	[[ -n "${TEMPPID}" ]] && kill -9 "${TEMPPID}"
fi

# Log
[[ $LOG_EXEC ]] && echo -e "${LOG_SUCC} Nanohome: Component \"${DESCRIPTION}\" removed" >> /proc/1/fd/1