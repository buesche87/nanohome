#!/bin/bash
#/////////////////////////////////////////////////////////////////////////////////////
# nanohome - create_panel
#
# Create a panel on the home dashboard
# - Get the current dashboard json from mqtt
# - Load the json entry with index passed to script
# - Load and prepare the panel templates
# - Get the current home dashboard and merge the new panel 
# - Upload the updated dashboard
#/////////////////////////////////////////////////////////////////////////////////////

# Parameter & Variables
DESCRIPTION=$1
UNIQUE="$(date +%s)"

MQTT_CONNECTION_STRING=(
	-h "${MQTT_SERVER}"
	-u "${MQTT_USER}"
	-P "${MQTT_PASSWORD}"
)

# Get dashboard json from "nanohome/dashboard/DESCRIPTION"
PUBLISHED_PANEL_JSON=$(
    mosquitto_sub "${MQTT_CONNECTION_STRING[@]}" \
        --retained-only --quiet -C 1 -W $MQTT_SUBSCRIBE_TIMEOUT_BIN \
        -t "${MQTT_TOPIC_DASHBOARD}/${DESCRIPTION}"
)

if [[ -z "${PUBLISHED_PANEL_JSON}" ]]; then
    [[ $LOG_EXEC ]] && echo -e "${LOG_ERRO} Nanohome: No retained messages found on \"${MQTT_TOPIC_DASHBOARD}/${DESCRIPTION}\"" >> /proc/1/fd/1
    exit 1
fi

# Extract payload and device details from topic
DEVICEID=$( jq -r '.deviceId' <<< "${PUBLISHED_PANEL_JSON}" )
COMPONENT=$( jq -r '.component' <<< "${PUBLISHED_PANEL_JSON}" )
DESCRIPTION=$( jq -r '.description' <<< "${PUBLISHED_PANEL_JSON}" )
ICON=$( jq -r '.icon' <<< "${PUBLISHED_PANEL_JSON}" )
LEGACY=$( jq -r '.legacy' <<< "${PUBLISHED_PANEL_JSON}" )

DESCRIPTION_ESCAPED=$(echo "${DESCRIPTION}" | sed 's/[\/&]/\\&/g')

# Replace component with component dev if legacy device
if [[ "${LEGACY}" == "true" ]]; then
    COMPONENT_SEARCH="${COMPONENT%%:*}";
    COMPONENT="${COMPONENT#*:}"
else
    COMPONENT_SEARCH="${COMPONENT}";
fi

# Define panel template
case "${COMPONENT_SEARCH}" in
    "switch"*)
        TEMPLATE_HTML_FILE="${GRAFANA_PANEL_TEMPLATE_SWITCH_HTML}"
        TEMPLATE_JSON_FILE="${GRAFANA_PANEL_TEMPLATE_SWITCH_JSON}"
        ;;
    "relay"*)
        TEMPLATE_HTML_FILE="${GRAFANA_PANEL_TEMPLATE_SWITCH_HTML_LEGACY}"
        TEMPLATE_JSON_FILE="${GRAFANA_PANEL_TEMPLATE_SWITCH_JSON}"
        ;;
    "cover"*)
        TEMPLATE_HTML_FILE="${GRAFANA_PANEL_TEMPLATE_COVER_HTML}"
        TEMPLATE_JSON_FILE="${GRAFANA_PANEL_TEMPLATE_COVER_JSON}"
        ;;
    *)
        echo -e "${LOG_ERRO} Nanohome: No dashboard element for component \"${COMPONENT_SEARCH}\" available" >> /proc/1/fd/1
        exit 1
        ;;
esac

PANEL_TEMPLATE_HTML=$(<"${TEMPLATE_HTML_FILE}")
PANEL_TEMPLATE_JSON=$(<"${TEMPLATE_JSON_FILE}")

# Replace device strings in html template
PANEL_TEMPLATE_HTML=${PANEL_TEMPLATE_HTML//_DEVICEID_/${DEVICEID}}
PANEL_TEMPLATE_HTML=${PANEL_TEMPLATE_HTML//_COMPONENT_/${COMPONENT}}
PANEL_TEMPLATE_HTML=${PANEL_TEMPLATE_HTML//_DESCRIPTION_/${DESCRIPTION}}
PANEL_TEMPLATE_HTML=${PANEL_TEMPLATE_HTML//_ICON_/${ICON}}

# Replace attributes in json template
PANEL_TEMPLATE_JSON=${PANEL_TEMPLATE_JSON//9490/${UNIQUE}}

# Merge html into json
PANEL_JSON=$(
    jq --arg html "$PANEL_TEMPLATE_HTML" \
    '.content = $html' <<< "$PANEL_TEMPLATE_JSON"
)

if [[ -z "${PANEL_JSON}" ]]; then
    echo -e "${LOG_ERRO} Nanohome: Error loading template for \"${DESCRIPTION}\"" >> /proc/1/fd/1
    [[ $LOG_DEBUG ]] && jq <<< "${PANEL_JSON}" >> /proc/1/fd/1
    exit 1
else
    [[ $LOG_EXEC ]] && echo -e "${LOG_SUCC} Nanohome: Panel template for \"${DESCRIPTION}\" loaded" >> /proc/1/fd/1
fi

# Download home dashboard from grafana
DASHBOARD_CURRENT_JSON=$(
    curl -s \
        -H "Authorization: Bearer ${GRAFANA_SERVICEACCOUNT_TOKEN}" \
        -H "Content-Type: application/json" \
        -X GET "${GRAFANA_HOST}/api/dashboards/uid/${GRAFANA_DASHBOARD_UID_HOME}" \
        -- json
)

# Extract dashboard content
DASHBOARD_CURRENT=$(
    jq '.dashboard' <<< "${DASHBOARD_CURRENT_JSON}"
)

if [[ -z "${DASHBOARD_CURRENT}" ]]; then
    [[ $LOG_EXEC ]] && echo -e "${LOG_ERRO} Nanohome: Could not download home dashboard \"${GRAFANA_DASHBOARD_UID_HOME}\"" >> /proc/1/fd/1
    exit 1
else
    [[ $LOG_EXEC ]] && echo -e "${LOG_SUCC} Nanohome: Home dashboard \"${GRAFANA_DASHBOARD_UID_HOME}\" loaded" >> /proc/1/fd/1
fi

# Merge new panel into dashboard
DASHBOARD_PREPARED=$(
    jq --argjson PANEL "${PANEL_JSON}" \
    '.panels += [$PANEL]' <<< "${DASHBOARD_CURRENT}"
)

# Prepare metadata for dashboard upload
DASHBOARD_DATA='{
	"dashboard": {},
	"folderUid": "'"${GRAFANA_FOLDER_UID}"'",
	"message": "Nanohome: Panel '"${DESCRIPTION}"' added",
	"overwrite": true
}'

# Merge dashboard and metadata
DASHBOARD_NEW=$(
	jq --argjson dashboard "${DASHBOARD_PREPARED}" \
	'.dashboard = $dashboard' \
	<<< "${DASHBOARD_DATA}"
)

if [[ -z "${DASHBOARD_NEW}" ]]; then
    [[ $LOG_EXEC ]] && echo -e "${LOG_ERRO} Nanohome: Could not merge panel \"${DESCRIPTION}\" into home dashbard" >> /proc/1/fd/1
    exit 1
else
    [[ $LOG_EXEC ]] && echo -e "${LOG_SUCC} Nanohome: Panel \"${DESCRIPTION}\" merged into home dashboard" >> /proc/1/fd/1
fi

# Upload dashboard to grafana
curl --insecure \
    -H "Authorization: Bearer ${GRAFANA_SERVICEACCOUNT_TOKEN}" \
    -H "Content-Type: application/json" \
    -d "${DASHBOARD_NEW}" \
    -X POST "${GRAFANA_HOST}/api/dashboards/db"

if [[ $? -eq 0 ]]; then
	[[ $LOG_EXEC ]] && echo -e "${LOG_SUCC} Nanohome: Home dashbaord updated" >> /proc/1/fd/1
	return 0
else
	[[ $LOG_EXEC ]] && echo -e "${LOG_ERRO} Nanohome: Failed to update home dashbaord" >> /proc/1/fd/1
	exit 1
fi	
