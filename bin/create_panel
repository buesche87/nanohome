#!/bin/bash
#/////////////////////////////////////////////////////////////////////////////////////
# nanohome - create_panel
#
# Create a new panel on the home dashboard
# - Get the current dashboard json from mqtt
# - Load the json entry with index passed to script
# - Load and prepare the panel templates
# - Get the current home dashboard and merge the new panel 
# - Upload the updated dashboard
#/////////////////////////////////////////////////////////////////////////////////////
DESCRIPTION=$1

# Get json device config from: "nanohome/devices/<description>"
SUBSCRIBETOPIC="nanohome/devices/${DESCRIPTION}"
MQTT_CONNECTION_STRING=(-h "$MQTT_SERVER" -u "$MQTT_USER" -P "$MQTT_PASSWORD")
PUBLISHED_CONFIG_JSON=$(
    mosquitto_sub ${MQTT_CONNECTION_STRING[@]} $MQTT_RETAINED_ONEMSG -t $SUBSCRIBETOPIC
)

# Exit if no config found
if [[ -z $PUBLISHED_CONFIG_JSON ]]; then
    echo -e "${LOG_ERRO} Create panel: Failed to create dashboard panel for \"${DESCRIPTION}\"" >> /proc/1/fd/1
    echo -e "${LOG_ERRO}  > No retained messages found on \"${SUBSCRIBETOPIC}\"" >> /proc/1/fd/1
    exit 1
fi

# Extract config values
DEVICEID=$(jq -r '.deviceId' <<< "$PUBLISHED_CONFIG_JSON")
COMPONENT=$(jq -r '.component' <<< "$PUBLISHED_CONFIG_JSON")
DESCRIPTION=$(jq -r '.description' <<< "$PUBLISHED_CONFIG_JSON")
ICON=$(jq -r '.icon' <<< "$PUBLISHED_CONFIG_JSON")
LEGACY=$(jq -r '.legacy' <<< "$PUBLISHED_CONFIG_JSON")

# Define panel template
case "${COMPONENT%%:*}" in
    switch*|relay*)
        PANEL_TEMPLATE_HTML=$(<"${GRAFANA_PANEL_TEMPLATE_SWITCH_HTML}")
        PANEL_TEMPLATE_JSON=$(<"${GRAFANA_PANEL_TEMPLATE_SWITCH_JSON}")
        ;;
    cover*)
        PANEL_TEMPLATE_HTML=$(<"${GRAFANA_PANEL_TEMPLATE_COVER_HTML}")
        PANEL_TEMPLATE_JSON=$(<"${GRAFANA_PANEL_TEMPLATE_COVER_JSON}")
        ;;
    *)
        echo -e "${LOG_ERRO} Create panel: No panel template for \"${DESCRIPTION}\" found" >> /proc/1/fd/1
        echo -e "${LOG_ERRO}  > component searched: \"${COMPONENT_SEARCH}\"" >> /proc/1/fd/1
        exit 1
        ;;
esac

# Define "case" search
DESCRIPTION_ESCAPED=${DESCRIPTION//[\/&]/\\&}
$LEGACY && COMPONENT="${COMPONENT#*:}"

# Replace device strings in html template
PANEL_TEMPLATE_HTML=${PANEL_TEMPLATE_HTML//_DEVICEID_/${DEVICEID}}
PANEL_TEMPLATE_HTML=${PANEL_TEMPLATE_HTML//_COMPONENT_/${COMPONENT}}
PANEL_TEMPLATE_HTML=${PANEL_TEMPLATE_HTML//_DESCRIPTION_/${DESCRIPTION}}
PANEL_TEMPLATE_HTML=${PANEL_TEMPLATE_HTML//_ICON_/${ICON}}

# Replace attributes in json template
UNIQUEID="$(date +%s)"
PANEL_TEMPLATE_JSON=${PANEL_TEMPLATE_JSON//9490/${UNIQUEID}}

# Merge html into json
PANEL_JSON=$(
    jq --arg html "$PANEL_TEMPLATE_HTML" \
    '.content = $html' <<< "$PANEL_TEMPLATE_JSON"
)

# Exit if there was an error
if [[ -z $PANEL_JSON ]]; then
    echo -e "${LOG_ERRO} Create panel: Error creating panel for \"${DESCRIPTION}\"" >> /proc/1/fd/1
    echo -e "${LOG_ERRO}  > PANEL_JSON empty" >> /proc/1/fd/1
    exit 1
fi

# Download home dashboard from grafana
DASHBOARD_CURRENT_JSON=$(
    curl -s \
    -H "Authorization: Bearer ${GRAFANA_SA_TOKEN}" \
    -H "Content-Type: application/json" \
    -X GET "${GRAFANA_HOST}/api/dashboards/uid/${GRAFANA_DASHBOARD_HOME_UID}" \
    -- json
)

# Exit if there was an error
if [[ -z $DASHBOARD_CURRENT_JSON ]]; then
    echo -e "${LOG_ERRO} Create panel: Could not download home dashboard with id \"${GRAFANA_DASHBOARD_HOME_UID}\"" >> /proc/1/fd/1
    exit 1
fi

# Extract folderuid
GRAFANA_FOLDER_UID=$(
    jq -r .meta.folderUid <<< "${DASHBOARD_CURRENT_JSON}"
)

# Extract dashboard content
DASHBOARD_CURRENT=$(
    jq '.dashboard' <<< "${DASHBOARD_CURRENT_JSON}"
)

# Exit if there was an error
if [[ -z $DASHBOARD_CURRENT ]]; then
    echo -e "${LOG_ERRO} Create panel: Could extract .dashboard from home dashboard json" >> /proc/1/fd/1
    exit 1
fi

# Merge new panel into dashboard
DASHBOARD_PREPARED=$(
    jq --argjson PANEL "${PANEL_JSON}" \
    '.panels += [$PANEL]' <<< "${DASHBOARD_CURRENT}"
)

# Prepare metadata for dashboard upload
DASHBOARD_METADATA='{
	"dashboard": {},
	"folderUid": "'"${GRAFANA_FOLDER_UID}"'",
	"message": "Nanohome: Panel '"${DESCRIPTION}"' added",
	"overwrite": true
}'

# Merge dashboard and metadata
DASHBOARD_NEW=$(
	jq --argjson dashboard "${DASHBOARD_PREPARED}" \
	'.dashboard = $dashboard' <<< "${DASHBOARD_METADATA}"
)

# Exit if there was an error
if [[ -z $DASHBOARD_NEW ]]; then
    echo -e "${LOG_ERRO} Create panel: Could not merge panel \"${DESCRIPTION}\" into home dashboard" >> /proc/1/fd/1
    exit 1
fi

# Upload dashboard to grafana
upload_status=$(curl --insecure \
    -s -o /dev/null -w "%{http_code}" \
    -H "Authorization: Bearer ${GRAFANA_SA_TOKEN}" \
    -H "Content-Type: application/json" \
    -d "${DASHBOARD_NEW}" \
    -X POST "${GRAFANA_HOST}/api/dashboards/db")

# Check if this was successfull
if [ "$upload_status" -eq 200 ] || [ "$upload_status" -eq 202 ]; then
    echo -e "${LOG_SUCC} Create panel: Successfully added panel for \"${DESCRIPTION}\"" >> /proc/1/fd/1
    exit 0
else
    echo -e "${LOG_ERRO} Nanohome: Failed to upload new dashboard with panel \"${DESCRIPTION}\"" >> /proc/1/fd/1
    echo -e "${LOG_ERRO}  > status code: $upload_status" >> /proc/1/fd/1
    exit 1
fi
