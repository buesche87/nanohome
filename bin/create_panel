#!/bin/bash
#/////////////////////////////////////////////////////////////////////////////////////
# nanohome panel creator
#
# create buttons or slider on the home dashbaord
#/////////////////////////////////////////////////////////////////////////////////////

# Parameter & Variables
COMPONENT_DESCRIPTION=$1
LEGACY=$2
JSON_INDEX=$3
RANDOM="$(date +%s)"

# Grafana dashboard panels
SWITCHTEMPLATE_HTML="${NANOHOME_ROOTPATH}/grafana-templates/shelly_button.html"
SWITCHTEMPLATE_HTML_LEGACY="${NANOHOME_ROOTPATH}/grafana-templates/shelly_button_legacy.html"
SWITCHTEMPLATE_JSON="${NANOHOME_ROOTPATH}/grafana-templates/shelly_button.json"
COVERTEMPLATE_HTML="${NANOHOME_ROOTPATH}/grafana-templates/shelly_slider.html"
COVERTEMPLATE_HTML_LEGACY="${NANOHOME_ROOTPATH}/grafana-templates/shelly_slider_legacy.html"
COVERTEMPLATE_JSON="${NANOHOME_ROOTPATH}/grafana-templates/shelly_slider.json"

# Tempfiles > geet rid of them
ORIGINALDASHBOARD=$(mktemp)
MODIFIEDDASHBOARD=$(mktemp)
FINALDASHBOARD=$(mktemp)
PANEL_TEMPLATE=$(mktemp)

# DEV - TEST
MQTT_HOST="nanohome.buesche.one"
JSON_INDEX="7"

# Main
PUBLISHED_ELEMENTS=$(
    mosquitto_sub \
    -h "${MQTT_HOST}" \
    -u "${MQTT_USER}" \
    -P "${MQTT_PASSWORD}" \
    -t "${MQTT_TOPIC_DASHBOARD}" \
    -C 1 -W 2 --retained-only --quiet
)

if [ -z "${PUBLISHED_ELEMENTS}" ]; then
    echo -e "${LOG_ERRO} No retained messages found on \"${MQTT_TOPIC_DASHBOARD}\"" >> /proc/1/fd/1
    exit 1
fi

NEW_ELEMENT=$(
    jq --argjson idx "${JSON_INDEX}" \
    '.[] | select(.index == $idx)' \
    <<< "${PUBLISHED_ELEMENTS}"
)

if [ -z "${NEW_ELEMENT}" ]; then
    echo -e "${LOG_ERRO} Element with index \"${JSON_INDEX}\" not found" >> /proc/1/fd/1
    exit 1
else
    DEVICEID=$(
        jq -r '.deviceId' <<< "${NEW_ELEMENT}"
    )
    COMPONENT=$(
        jq -r '.component' <<< "${NEW_ELEMENT}"
    )
    COMPONENT_DESCRIPTION=$(
        jq -r '.description' <<< "${NEW_ELEMENT}"
    )
    ICON=$(
        jq -r '.icon' <<< "${NEW_ELEMENT}"
    )
fi

# Check legacy device and if panel got copied
[ "${LEGACY}" == "true" ] && COMPONENT="${COMPONENT#*:}"

# Copy panel template
# TODO: NEU = JSON + HTML > HIER MERGEN
case "${COMPONENT}" in
    "switch"*)
        PANEL_TEMPLATE_HTML=$(<"${SWITCHTEMPLATE_HTML}")
        PANEL_TEMPLATE_JSON=$(<"${SWITCHTEMPLATE_JSON}")


        ;;
    "relay"*)
        PANEL_TEMPLATE_HTML=$(<"${SWITCHTEMPLATE_HTML_LEGACY}")
        PANEL_TEMPLATE_JSON=$(<"${SWITCHTEMPLATE_JSON_LEGACY}")


        ;;
    "cover"*)
        PANEL_TEMPLATE_HTML=$(<"${COVERTEMPLATE_HTML}")
        PANEL_TEMPLATE_JSON=$(<"${COVERTEMPLATE_JSON}")


        ;;
    *)
        echo -e "${LOG_ERRO} No dashboard element for component \"${COMPONENT}\" available" >> /proc/1/fd/1
        exit 1
        ;;
esac




if [ -z "${PANEL_TEMPLATE_JSON}" ] || [ -z "${PANEL_TEMPLATE_HTML}" ] ; then
    echo -e "${LOG_ERRO} Error loading template \"${PANEL_TEMPLATE}\"" >> /proc/1/fd/1
    exit 1
else
    echo -e "${LOG_SUCC} Panel template for component \"${COMPONENT}\" loaded" >> /proc/1/fd/1
fi

# HTML

# Replace device strings in template
COMPONENT_DESCRIPTION_ESCAPED=$(echo "${COMPONENT_DESCRIPTION}" | sed 's/[\/&]/\\&/g')

PANEL_TEMPLATE_HTML=${PANEL_TEMPLATE_HTML//_DEVID_/${DEVICEID}}
PANEL_TEMPLATE_HTML=${PANEL_TEMPLATE_HTML//_COMPONENT_/${COMPONENT}}
PANEL_TEMPLATE_HTML=${PANEL_TEMPLATE_HTML//_DESCRIPTION_/${COMPONENT_DESCRIPTION_ESCAPED}}
PANEL_TEMPLATE_HTML=${PANEL_TEMPLATE_HTML//_ICON_/${ICON}}
PANEL_TEMPLATE_HTML=${PANEL_TEMPLATE_HTML//_RANDOM_/${RANDOM}}


# TODO
# PANEL_TEMPLATE = MERGE PANEL_TEMPLATE_JSON & PANEL_TEMPLATE_HTML

# JSON

# Download home dashboard from grafana to temporary file
DASHBOARD_CURRENT_JSON=$(
    curl -s \
        -H "Authorization: Bearer ${GRAFANA_SERVICEACCOUNT_TOKEN}" \
        -H "Content-Type: application/json" \
        -X GET "${GRAFANA_HOST}/api/dashboards/uid/${GRAFANA_DASHBOARD_UID_HOME}" \
        -- json
)

DASHBOARD_CURRENT=$(
    jq '.dashboard' <<< "${DASHBOARD_CURRENT}"
)

if [ -z "${DASHBOARD_CURRENT}" ]; then
    echo -e "${LOG_ERRO} Could not download dashboard \"${GRAFANA_DASHBOARD_UID_HOME}\"" >> /proc/1/fd/1
    exit 1
else
    echo -e "${LOG_SUCC} Dashboard \"${GRAFANA_DASHBOARD_UID_HOME}\" loaded" >> /proc/1/fd/1
fi

DASHBOARD_PREPARED=$(
    jq --argjson PANEL "${PANEL_TEMPLATE}" \
    '.dashboard.panels += [$PANEL]' <<< "${DASHBOARD_CURRENT}"
)

DASHBOARD_DATA='{
	"dashboard": {},
	"folderUid": "'"${GRAFANA_FOLDER_UID}"'",
	"message": "Nanohome: Panel '"${COMPONENT_DESCRIPTION}"' added",
	"overwrite": true
}'

DASHBOARD_NEW=$(
	jq --argjson dashboard "${DASHBOARD_PREPARED}" \
	'.dashboard = $dashboard' \
	<<< "${DASHBOARD_DATA}"
)

if [ -z "${DASHBOARD_NEW}" ]; then
    echo -e "${LOG_ERRO} Nanohome: Could prepare dashbard" >> /proc/1/fd/1
    exit 1
else
    echo -e "${LOG_SUCC} Nanohome: Dashboard prepared" >> /proc/1/fd/1
fi

# Upload dashboard to grafana
curl -s --insecure \
    -H "Authorization: Bearer ${GRAFANA_SERVICEACCOUNT_TOKEN}" \
    -H "Content-Type: application/json" \
    -d "${DASHBOARD_NEW}" \
    -X POST "${GRAFANA_HOST}/api/dashboards/db"

if [ $? -eq 0 ]; then
	echo -e "${LOG_SUCC} Nanohome: Modified dashbaord uploaded" >> /proc/1/fd/1
	return 0
else
	echo -e "${LOG_ERRO} Nanohome: Failed uploading modified dashbaord" >> /proc/1/fd/1
	exit 1
fi	
