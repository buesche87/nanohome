#!/bin/bash
#/////////////////////////////////////////////////////////////////////////////////////
# nanohome - create_standbymgr
#
# Create a standby manager
# - Get standby json from "nanohome/standby/+"
# - Create a new standby manager for every entry
#/////////////////////////////////////////////////////////////////////////////////////

# Parameter & Variables
MQTT_CONNECTION_STRING=(
	-h "${MQTT_SERVER}"
	-u "${MQTT_USER}"
	-P "${MQTT_PASSWORD}"
)

# Get standby json from "nanohome/standby/+"
PUBLISHED_STANDBYCONFIG_JSON=$(
	mosquitto_sub "${MQTT_CONNECTION_STRING[@]}" --retained-only --nodelay --quiet -W 3 \
	-t "${MQTT_TOPIC_STANDBY}" 
)

if [[ -z "${PUBLISHED_STANDBYCONFIG_JSON}" ]]; then
	[[ $LOG_EXEC ]] && echo -e "${LOG_WARN} Nanohome: No retained messages found on \"${MQTT_TOPIC_STANDBY}\"" >> /proc/1/fd/1
	exit 1
fi

# Add every standbyconfig from json to the crontab file
CONFIGURED_STANDBY_JSON=$(
	jq -s 'add' <<< "${PUBLISHED_STANDBYCONFIG_JSON}"
)

jq -c '.[]' <<< "${CONFIGURED_STANDBY_JSON}" | \
	while read -r STANDBYCONFIG; do

	# Extract payload and device details from topic
	DEVICEID=$( jq -r .deviceId <<< "${STANDBYCONFIG}" )
	COMPONENT=$( jq -r .component <<< "${STANDBYCONFIG}" )
	DESCRIPTION=$( jq -r .description <<< "${STANDBYCONFIG}" )

	# Check if component is already managed
	MANAGED=$(
		ps | grep "standby" | grep "${STATUSTOPIC}" | grep -v "grep"
	)

	# Start manager and pass the standbyconfig json
	if [[ -z "${MANAGED}" ]]; then

		/bin/bash standby_shelly_plus "${STANDBYCONFIG}"

		[[ $LOG_EXEC ]] && echo -e "${LOG_SUCC} Nanohome: Standby manager for \"${DESCRIPTION}\" created" >> /proc/1/fd/1
	else
		[[ $LOG_EXEC ]] && echo -e "${LOG_INFO} Nanohome: Standby manager for \"${DESCRIPTION}\" already running" >> /proc/1/fd/1
	fi
done