#!/bin/bash
#/////////////////////////////////////////////////////////////////////////////////////
# Nanohome create dashboard element
#
# Create a dashbaord element from template
#/////////////////////////////////////////////////////////////////////////////////////

DESCRIPTION=$1
LEGACY=$2
INDEX=$3
RANDOM="$(date +%s)"

# Element templates
TEMPLATESUFFIX_JSON=".json"
[[ "${LEGACY}" == "true" ]] && TEMPLATESUFFIX_JSON="_legacy.json"

SWITCHTEMPLATE_HTML="${ROOTPATH}/templates/shelly_button${TEMPLATESUFFIX_JSON}"
SWITCHTEMPLATE_JSON="${ROOTPATH}/templates/shelly_button.html"
COVERTEMPLATE_HTML="${ROOTPATH}/templates/shelly_slider${TEMPLATESUFFIX_JSON}"
COVERTEMPLATE_JSON="${ROOTPATH}/templates/shelly_slider.html"

# Tempfiles
ORIGINALDASHBOARD=$(mktemp)
MODIFIEDDASHBOARD=$(mktemp)
FINALDASHBOARD=$(mktemp)
PANELTEMPLATE=$(mktemp)

# Main
PUBLISHEDELEMENTS=$(mosquitto_sub -h "${MQTT_SERVER}" -u "${MQTT_USER}" -P "${MQTT_PASSWORD}" -t "${TOPIC_DASHBOARD}" -C 1 -W 2 --retained-only --nodelay --quiet)
NEWELEMENT=$(echo "${PUBLISHEDELEMENTS}" | jq --argjson idx "${INDEX}" '.[] | select(.index == $idx)')

DEVICEID=$(echo "${NEWELEMENT}" | jq -r .deviceId )
COMPONENT=$(echo "${NEWELEMENT}" | jq -r .component )
DESCRIPTION=$(echo "${NEWELEMENT}" | jq -r .description )
ICON=$(echo "${NEWELEMENT}" | jq -r .icon )

# Copy panel template
case "${COMPONENT}" in
    "switch"*)
        cp "${SWITCHTEMPLATE}" "${PANELTEMPLATE}"
        ;;
    "relay"*)
        cp "${SWITCHTEMPLATE}" "${PANELTEMPLATE}"
        ;;
    "cover"*)
        cp "${COVERTEMPLATE}" "${PANELTEMPLATE}"
        ;;
    *)
        echo "No dashboard element for component $COMPONENT available"
        exit 0
        ;;
esac

# Check legacy device and if panel got copied
[[ "${LEGACY}" == "true" ]] && COMPONENT="${COMPONENT#*:}"
[ ! -s "${PANELTEMPLATE}" ] && echo "Error copying template" && exit 1

# Replace device-strings in template
sed -i "s/_DEVID_/${DEVICEID}/g" "${PANELTEMPLATE}"
sed -i "s/_DESCRIPTION_/${DESCRIPTION}/g" "${PANELTEMPLATE}"
sed -i "s/_COMPONENT_/${COMPONENT}/g" "${PANELTEMPLATE}"
sed -i "s/_ICON_/${ICON}/g" "${PANELTEMPLATE}"
sed -i "s/_RAND_/${RANDOM}/g" "${PANELTEMPLATE}"

# Download home dashboard from grafana to temporary file
curl -X GET -H "Authorization: Bearer ${GRAFANA_TOKEN}" -H "Content-Type: application/json" "http://${GRAFANA_SERVICE}/api/dashboards/uid/${GRAFANA_HOME_UID}" > "${ORIGINALDASHBOARD}"

# Add element from template to dashboard
jq --argjson PANEL "$(cat "${PANELTEMPLATE}")" '.dashboard.panels += [$PANEL]' "${ORIGINALDASHBOARD}" > "${MODIFIEDDASHBOARD}"

# Get and overwrite folderId of modified dashboard
FOLDERID=$(grep folderId "${MODIFIEDDASHBOARD}" | awk '{ sub(/^[ \t]+/, ""); print }')
jq --argjson OPTIONS "{ ${FOLDERID} \"overwrite\": true }" '. += $OPTIONS' "${MODIFIEDDASHBOARD}" > "${FINALDASHBOARD}"

# Error and exit if merge failed
[ ! -s "${FINALDASHBOARD}" ] && echo "Error merging template" && exit 1

# Upload dashboard to grafana
curl -X POST --insecure -H "Authorization: Bearer ${GRAFANA_TOKEN}" -H "Content-Type: application/json" -d @"${FINALDASHBOARD}" "http://${GRAFANA_SERVICE}/api/dashboards/db" > /dev/null 2>&1

# Remove temporary files
rm -f "${ORIGINALDASHBOARD}"
rm -f "${MODIFIEDDASHBOARD}"
rm -f "${FINALDASHBOARD}"
rm -f "${PANELTEMPLATE}"
