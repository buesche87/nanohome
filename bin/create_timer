#!/bin/bash
#/////////////////////////////////////////////////////////////////////////////////////
# nanohome - create_timer
#
# Create a timer
# - Get retainded timer configs for each connected device
# - Clear the crontab file "/etc/crontabs/nanohome"
# - Create a new crontab entry for every config published
#/////////////////////////////////////////////////////////////////////////////////////

# Load timer configs
SUBSCRIBETOPIC="nanohome/timer/+"
MQTT_CONNECTION_STRING=(-h "$MQTT_SERVER" -u "$MQTT_USER" -P "$MQTT_PASSWORD")
PUBLISHED_CONFIGS=$(
	mosquitto_sub "${MQTT_CONNECTION_STRING[@]}" $MQTT_RETAINED_ALL	-t "${SUBSCRIBETOPIC}" 
)

# Exit script if no timer are configured
if [[ -z $PUBLISHED_CONFIGS ]]; then
    echo -e "${LOG_INFO} Create timer: Failed to get timer config" >> /proc/1/fd/1
	echo -e "${LOG_INFO}  > No message received from \"${SUBSCRIBETOPIC}\"" >> /proc/1/fd/1
	exit 0
elif [[ "${PUBLISHED_CONFIGS}" == "[]" ]]; then
    echo -e "${LOG_INFO} Create timer: No timer configured" >> /proc/1/fd/1
	echo -e "${LOG_INFO}  > Empty message received from \"${SUBSCRIBETOPIC}\"" >> /proc/1/fd/1
	sed -i '0,/# Nanohome Crontabs/!d' "/etc/crontabs/root"
	exit 0
fi

# Crontab entry templates
CRONENTRY_TEMPLATE="_MINUTE_ _HOUR_ * * _TIMERPERIOD_ /usr/bin/mosquitto_pub ${MQTT_CONNECTION_STRING[@]} -t _DEVICEID_/command/_COMPONENT_ -m _MESSAGE_"
CRONENTRY_TEMPLATE_LEGACY="_MINUTE_ _HOUR_ * * _TIMERPERIOD_ /usr/bin/mosquitto_pub ${MQTT_CONNECTION_STRING[@]} -t shellies/_DEVICEID_/_COMPONENTDEV_/_COMPONENTINDEX_/command -m _MESSAGE_"

# Clear crontab file
sed -i '0,/# Nanohome Crontabs/!d' "/etc/crontabs/root"

# Create an array containing all configs retreived
PUBLISHED_TIMER_ARRAY=$(
	jq -s 'add' <<< "${PUBLISHED_CONFIGS}"
)

# Exit if there were errors
if [[ -z $PUBLISHED_TIMER_ARRAY ]]; then
    echo -e "${LOG_ERRO} Create timer: Failed to gather timer" >> /proc/1/fd/1
	jq <<< "${PUBLISHED_CONFIGS}" >> /proc/1/fd/1
	exit 1
fi

# Create a crontab entry for each config
jq -c '.[]' <<< "${PUBLISHED_TIMER_ARRAY}" |
while read -r TIMER; do

	# Extract payload and device details from topic
	DEVICEID=$(jq -r '.deviceId' <<< "$TIMER")
	COMPONENT=$(jq -r '.component' <<< "$TIMER")
	DESCRIPTION=$(jq -r '.description' <<< "$TIMER")
	TIMERPERIOD=$(jq -r .timerPeriodValue <<< "$TIMER")
	TIMERPERIODTXT=$(jq -r .timerPeriodText <<< "$TIMER")
	TIMERON=$(jq -r .timerOn <<< "$TIMER")
	TIMEROFF=$(jq -r .timerOff <<< "$TIMER")
	LEGACY=$(jq -r .legacy <<< "$TIMER")

	if $LEGACY; then
		COMPONENTDEV=$( cut -d ':' -f 1 <<< "${COMPONENT}" )
		COMPONENTINDEX=$( cut -d ':' -f 2 <<< "${COMPONENT}" )

		CRONENTRY="${CRONENTRY_TEMPLATE_LEGACY}"
		CRONENTRY="${CRONENTRY//_COMPONENTDEV_/${COMPONENTDEV}}"
		CRONENTRY="${CRONENTRY//_COMPONENTINDEX_/${COMPONENTINDEX}}"
	else
		CRONENTRY="${CRONENTRY_TEMPLATE}"
		CRONENTRY="${CRONENTRY//_COMPONENT_/${COMPONENT}}"
	fi

	# Prepare cron entry
	CRONENTRY="${CRONENTRY//_TIMERPERIOD_/${TIMERPERIOD}}"
	CRONENTRY="${CRONENTRY//_DEVICEID_/${DEVICEID}}"

	# If timerOn set create a cron entry to switch on component
	if [[ -n $TIMERON ]]; then
		CRONENTRY_ON="${CRONENTRY}"
		HOUR="${TIMERON:0:2}"
		MINUTE="${TIMERON:3:5}"

		# Check component type
		case "${COMPONENT}" in
			switch*|relay*) MESSAGE="on" ;;
			cover*) MESSAGE="open" ;;
		esac

		# Fill cron entry with "on" values
		CRONENTRY_ON="${CRONENTRY_ON//_MINUTE_/${MINUTE}}"
		CRONENTRY_ON="${CRONENTRY_ON//_HOUR_/${HOUR}}"
		CRONENTRY_ON="${CRONENTRY_ON//_MESSAGE_/${MESSAGE}}"

		# Append entry to crontab
		echo "${CRONENTRY_ON}" >> "/etc/crontabs/root"

		# Log
		[[ $LOG_DEBUG ]] && echo -e "${LOG_INFO} Nanohome: Timer for \"${DESCRIPTION}\" - [On: ${TIMERPERIODTXT} - ${HOUR}:${MINUTE}]" >> /proc/1/fd/1
	fi

	# If timerOff set create a cron entry to switch off component
	if [[ -n $TIMEROFF ]]; then
		CRONENTRY_OFF="${CRONENTRY}"
		HOUR="${TIMEROFF:0:2}"
		MINUTE="${TIMEROFF:3:5}"

		# Check component type
		case "${COMPONENT}" in
			switch*|relay*) MESSAGE="off" ;;
			cover*) MESSAGE="close" ;;
		esac

		# Fill cron entry with "off" values
		CRONENTRY_OFF="${CRONENTRY_OFF//_MINUTE_/${MINUTE}}"
		CRONENTRY_OFF="${CRONENTRY_OFF//_HOUR_/${HOUR}}"
		CRONENTRY_OFF="${CRONENTRY_OFF//_MESSAGE_/${MESSAGE}}"

		# Append entry to crontab
		echo "${CRONENTRY_OFF}" >> "/etc/crontabs/root"

		# Log
		[[ $LOG_DEBUG ]] && echo -e "${LOG_INFO} Nanohome: Timer for \"${DESCRIPTION}\" - [Off: ${TIMERPERIODTXT} - ${HOUR}:${MINUTE}]" >> /proc/1/fd/1
	fi

	echo -e "${LOG_INFO} Create timer: Timer for \"${DESCRIPTION}\" created" >> /proc/1/fd/1
done