#!/bin/bash
#/////////////////////////////////////////////////////////////////////////////////////
# Nanohome Shelly timer manager
# 
# subscribe to timer topics and get all retained timer json
# parse the timers into crontab lines
# replace the crontab file /etc/crontabs/nanohome
#/////////////////////////////////////////////////////////////////////////////////////

# debug
MQTT_SERVER="nanohome.buesche.one"

# simplify mqtt connection
MQTT_CONNECTION_STRING=(
	-h "${MQTT_SERVER}"
	-u "${MQTT_USER}"
	-P "${MQTT_PASSWORD}"
)

# create temporary crontab array
CRONTAB_FILE="/etc/crontabs/nanohome"
CRONTAB_TEMP=()

# crontab entry templates
CRONENTRY_TEMPLATE="MINUTE HOUR * * PERIOD root /usr/bin/mosquitto_pub ${MQTT_CONNECTION_STRING[@]} -t DEVICEID/command/COMPONENT -m MESSAGE"
CRONENTRY_TEMPLATE_LEGACY="MINUTE HOUR * * PERIOD root /usr/bin/mosquitto_pub ${MQTT_CONNECTION_STRING[@]} -t shellies/DEVICEID/COMPONENTDEV/COMPONENTIDEX/command -m MESSAGE"


# TODO: ggf. json payload abholen > k√∂nnte IFS ersparen
# subscribe to timer topic and create json array with all timers
TIMERS_PUBLISHED=$(
	mosquitto_sub ${MQTT_CONNECTION_STRING[@]} \
	--retained-only --nodelay --quiet -W 2 \
	-t "${MQTT_TOPIC_TIMER}" 
)

TIMERS_CONFIGURED=$(
	jq -s '.[]' <<< "${TIMERS_PUBLISHED}"
)

# TODO: Array korrigieren
# process each timer for every device stored in the arary
for TIMER in "${TIMERS_CONFIGURED[@]}"; do

	# count timer per device and process data
	timer_objects=$(jq length <<< $TIMER)
	for ((i = 0; i < timer_objects; i++)); do

		# debug
		jq -r .[$i].deviceId <<< "${TIMER}"
		jq <<< "${TIMER}"

		# Fill Variables
		DEVICEID=$( jq -r .[$i].deviceId <<< "${TIMER}" )
		COMPONENT=$( jq -r .[$i].component <<< "${TIMER}" )
		DESCRIPTION=$( jq -r .[$i].description <<< "${TIMER}" )
		TIMERPERIOD=$( jq -r .[$i].timerPeriodValue <<< "${TIMER}" )
		TIMERPERIODTEXT=$( jq -r .[$i].timerPeriodText <<< "${TIMER}" )
		TIMERON=$( jq -r .[$i].timerOn <<< "${TIMER}" )
		TIMEROFF=$( jq -r .[$i].timerOff <<< "${TIMER}" )

		# Legacy
		LEGACY=$( jq -r .[$i].legacy <<< "${TIMER}" )

		if [[ "${LEGACY}" == "true" ]]; then
			CRONENTRY="${CRONENTRY_TEMPLATE_LEGACY}"

			COMPONENTDEV=$( cut -d ':' -f 1 <<< "${COMPONENT}" )
			COMPONENTINDEX=$( cut -d ':' -f 2 <<< "${COMPONENT}" )

			CRONENTRY=$(sed "s|COMPONENTDEV|${COMPONENTDEV}|g" <<< "${CRONENTRY}")
			CRONENTRY=$(sed "s|COMPONENTIDEX|${COMPONENTIDEX}|g" <<< "${CRONENTRY}")
		else
			CRONENTRY="${CRONENTRY_TEMPLATE}"
			CRONENTRY=$(sed "s|COMPONENT|${COMPONENT}|g" <<< "${CRONENTRY}")
		fi

		# Prepare cron entry
		CRONENTRY=$(sed "s|PERIOD|${TIMERPERIOD}|g" <<< "${CRONENTRY}")
		CRONENTRY=$(sed "s|DEVICEID|${DEVICEID}|g" <<< "${CRONENTRY}")

		# If timerOn set create a cron entry to switch on component
		if [[ "${TIMERON}" != "" ]]; then
			
			CRONONENTRY="${CRONENTRY}"

			# Parse hour and minute from time string
			HOUR="${TIMERON:0:2}"
			MINUTE="${TIMERON:3:5}"

			# Check component type
			case "${COMPONENT}" in
				"switch"*)
					MESSAGE="on"
				;;
				"cover"*)
					MESSAGE="open"
				;;
				"relay"*)
					MESSAGE="on"
			esac

			# Fill cron entry with on values
			CRONONENTRY=$(sed "s|MINUTE|${MINUTE}|g" <<< "${CRONONENTRY}")
			CRONONENTRY=$(sed "s|HOUR|${HOUR}|g" <<< "${CRONONENTRY}")
			CRONONENTRY=$(sed "s|MESSAGE|${MESSAGE}|g" <<< "${CRONONENTRY}")
			
			# Append entry to temp file
			CRONTAB_TEMP+="${CRONONENTRY}"
		fi

		# If on time create on entry
		if [[ "${TIMEROFF}" != "" ]]; then
		
			CRONOFFENTRY="${CRONENTRY}"

			# Parse hour and minute from time string
			HOUR="${TIMEROFF:0:2}"
			MINUTE="${TIMEROFF:3:5}"

			# Check component type
			case "${COMPONENT}" in
				"switch"*)
					MESSAGE="off"
				;;
				"cover"*)
					MESSAGE="close"
				;;
				"relay"*)
					MESSAGE="off"
			esac

			# Fill cron entry with off values
			CRONOFFENTRY=$(sed "s|MINUTE|${MINUTE}|g" <<< "${CRONOFFENTRY}")
			CRONOFFENTRY=$(sed "s|HOUR|${HOUR}|g" <<< "${CRONOFFENTRY}")
			CRONOFFENTRY=$(sed "s|MESSAGE|${MESSAGE}|g" <<< "${CRONOFFENTRY}")
			
			# Append entry to temp file
			echo "${CRONOFFENTRY}" >> "${CRONTAB_TEMP}"
		fi
	done
done

# Save to crontab
cat ${CRONTAB_TEMP} > ${CRONTAB_FILE}
chmod 600 ${CRONTAB_FILE}
