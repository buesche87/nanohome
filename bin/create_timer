#!/bin/bash
#/////////////////////////////////////////////////////////////////////////////////////
# Nanohome Shelly timer manager
# 
# subscribe to timer topics and get all retained timer json
# parse the timers into crontab lines
# replace the crontab file /etc/crontabs/nanohome
#/////////////////////////////////////////////////////////////////////////////////////

# simplify mqtt connection
MQTT_CONNECTION_STRING=(
	-h "${MQTT_SERVER}"
	-u "${MQTT_USER}"
	-P "${MQTT_PASSWORD}"
)

# clear crontab file
echo "" > "${NANOHOME_CRONTABS}"

CRONENTRY_TEMPLATE="_MINUTE_ _HOUR_ * * _TIMERPERIOD_ root /usr/bin/mosquitto_pub ${MQTT_CONNECTION_STRING[@]} -t _DEVICEID_/command/_COMPONENT_ -m _MESSAGE_"
CRONENTRY_TEMPLATE_LEGACY="_MINUTE_ _HOUR_ * * _TIMERPERIOD_ root /usr/bin/mosquitto_pub ${MQTT_CONNECTION_STRING[@]} -t shellies/_DEVICEID_/_COMPONENTDEV_/_COMPONENTINDEX_/command -m _MESSAGE_"

# subscribe to timer topic and create json array with all timers
TIMERS_PUBLISHED=$(
	mosquitto_sub "${MQTT_CONNECTION_STRING[@]}" \
	--retained-only --nodelay --quiet -W 2 \
	-t "${MQTT_TOPIC_TIMER}" 
)

TIMERS_CONFIGURED=$(
	jq -s 'add' <<< "${TIMERS_PUBLISHED}"
)

jq -c '.[]' <<< "${TIMERS_CONFIGURED}" | while read -r TIMER; do

	# debug
	echo ""
	jq <<< "${TIMER}"

	# Fill Variables
	DEVICEID=$( jq -r .deviceId <<< "${TIMER}" )
	COMPONENT=$( jq -r .component <<< "${TIMER}" )
	DESCRIPTION=$( jq -r .description <<< "${TIMER}" )
	TIMERPERIOD=$( jq -r .timerPeriodValue <<< "${TIMER}" )

	TIMERON=$( jq -r .timerOn <<< "${TIMER}" )
	TIMEROFF=$( jq -r .timerOff <<< "${TIMER}" )

	# Legacy
	LEGACY=$( jq -r .legacy <<< "${TIMER}" )

	if [[ "${LEGACY}" == "true" ]]; then
		CRONENTRY="${CRONENTRY_TEMPLATE_LEGACY}"

		COMPONENTDEV=$( cut -d ':' -f 1 <<< "${COMPONENT}" )
		COMPONENTINDEX=$( cut -d ':' -f 2 <<< "${COMPONENT}" )

		CRONENTRY="${CRONENTRY//_COMPONENTDEV_/${COMPONENTDEV}}"
		CRONENTRY="${CRONENTRY//_COMPONENTINDEX_/${COMPONENTINDEX}}"

	else
		CRONENTRY="${CRONENTRY_TEMPLATE}"
		CRONENTRY="${CRONENTRY//_COMPONENT_/${COMPONENT}}"
	fi

	# Prepare cron entry
	CRONENTRY="${CRONENTRY//_TIMERPERIOD_/${TIMERPERIOD}}"
	CRONENTRY="${CRONENTRY//_DEVICEID_/${DEVICEID}}"

	# If timerOn set create a cron entry to switch on component
	if [[ -n "${TIMERON}" ]]; then
		
		CRONENTRY_ON="${CRONENTRY}"

		# Parse hour and minute from time string
		HOUR="${TIMERON:0:2}"
		MINUTE="${TIMERON:3:5}"

		# Check component type
		case "${COMPONENT}" in
			"switch"*|"relay"*) MESSAGE="on" ;;
			"cover"*) MESSAGE="open" ;;
		esac

		# Fill cron entry with on values
		CRONENTRY_ON="${CRONENTRY_ON//_MINUTE_/${MINUTE}}"
		CRONENTRY_ON="${CRONENTRY_ON//_HOUR_/${HOUR}}"
		CRONENTRY_ON="${CRONENTRY_ON//_MESSAGE_/${MESSAGE}}"

		# debug
		echo "${CRONENTRY_OFF}"

		# Append entry to crontab
		echo "${CRONENTRY_ON}" > "${NANOHOME_CRONTABS}"
	fi

	# If on time create on entry
	if [[ -n "${TIMEROFF}" ]]; then
	
		CRONENTRY_OFF="${CRONENTRY}"

		# Parse hour and minute from time string
		HOUR="${TIMEROFF:0:2}"
		MINUTE="${TIMEROFF:3:5}"

		# Check component type
		case "${COMPONENT}" in
			"switch"*|"relay"*) MESSAGE="off" ;;
			"cover"*) MESSAGE="close" ;;
		esac

		# Fill cron entry with off values
		CRONENTRY_OFF="${CRONENTRY_OFF//_MINUTE_/${MINUTE}}"
		CRONENTRY_OFF="${CRONENTRY_OFF//_HOUR_/${HOUR}}"
		CRONENTRY_OFF="${CRONENTRY_OFF//_MESSAGE_/${MESSAGE}}"

		# debug
		echo "${CRONENTRY_OFF}"

		# Append entry to crontab
		echo "${CRONENTRY_OFF}" > "${NANOHOME_CRONTABS}"
	fi
		
done

chmod 600 "${NANOHOME_CRONTABS}"